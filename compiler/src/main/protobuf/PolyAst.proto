syntax = "proto2";
// XXX we use proto2 because proto3 *requires* every field to be optional
// which is too painful to deal with for now


package polyregion;

//option optimize_for = LITE_RUNTIME;

message Sym{repeated string fqn = 1;}

message Types{
  message Type{
    oneof sealed_value {
      RefTpe refTpe = 1;
      ArrayTpe arrayTpe = 2;
      BoolTpe boolTpe = 3;
      ByteTpe byteTpe = 4;
      CharTpe charTpe = 5;
      ShortTpe shortTpe = 6;
      IntTpe intTpe = 7;
      LongTpe longTpe = 8;
      FloatTpe floatTpe = 9;
      DoubleTpe doubleTpe = 10;
      StringTpe stringTpe = 11;
      // empty is Unit
    }
  }
  message RefTpe {required Sym name = 1; repeated Type args = 2;}
  message ArrayTpe {required Type tpe = 1;}
  message BoolTpe {}
  message ByteTpe {}
  message CharTpe {}
  message ShortTpe {}
  message IntTpe {}
  message LongTpe {}
  message FloatTpe {}
  message DoubleTpe {}
  message StringTpe {}
}


message Named{required string symbol = 1; required Types.Type tpe = 2;}

message Refs {
  message Ref {
    oneof sealed_value {
      Select select = 1;
      BoolConst boolConst = 2;
      ByteConst byteConst = 3;
      CharConst charConst = 4;
      ShortConst shortConst = 5;
      IntConst intConst = 6;
      LongConst longConst = 7;
      FloatConst floatConst = 8;
      DoubleConst doubleConst = 9;
      StringConst stringConst = 10;
      NullConst nullConst = 11;
      // empty is Unit
    }
  }
  message Select {required Named head = 1; repeated Named tail = 2;}
  message BoolConst {required bool value = 1;}
  message ByteConst {required sint32 value = 1;}
  message CharConst {required sint32 value = 1;}
  message ShortConst {required sint32 value = 1;}
  message IntConst {required sint32 value = 1;}
  message LongConst {required sint64 value = 1;}
  message FloatConst {required float value = 1;}
  message DoubleConst {required double value = 1;}
  message StringConst {required string value = 1;}
  message NullConst {}
}


message Tree{

  message Position{
    required string file = 1;
    required int64 line = 2;
    required int64 col = 3;
  }

  message Expr {
    oneof sealed_value {
      Alias alias = 1;
      Invoke invoke = 2;
      Index index = 3;
      //      Block block = 4;
      // empty here is no-op
    }
  }

  message Alias{required Refs.Ref ref = 1;}
  message Index{
    required Refs.Select lhs = 1;
    required Refs.Ref idx = 2;
    required Types.Type tpe = 3;
  }

  message Invoke{
    required Refs.Ref lhs = 1;
    required string name = 2;
    repeated Refs.Ref args = 3;
    required Types.Type tpe = 4;
  }
  //  message Block{
  //    repeated Stmt statements = 1;
  //    required Expr return = 2;
  //  }

  message Stmt{
    oneof sealed_value {
      Comment comment = 1;
      Var var = 2;
      Effect effect = 3;
      Mut mut = 4;
      Update update = 5;
      While while = 6;
      Break break = 7;
      Cond cond = 8;
      // empty here is no-op
    }
  }

  message Comment{
    required string value = 1;
  }
  message Var{
    required Named name = 1;
    required Expr rhs = 3;
  }
  message Mut{
    required Refs.Select name = 1;
    required Expr expr = 2;
  }
  message Update{
    required Refs.Select lhs = 1;
    required Refs.Ref idx = 2;
    required Refs.Ref value = 3;
  }
  message Effect{
    required Refs.Select lhs = 1;
    required string name = 2;
    repeated Refs.Ref args = 3;
  }
  message While{
    required Expr cond = 1;
    repeated Stmt body = 2;
  }

  message Break{}

  message Cond{
    required Expr cond = 1;
    repeated Stmt trueBr = 2;
    repeated Stmt falseBr = 3;
  }

  message Function{
    //    optional Position pos = 1;
    required string name = 2;
    repeated Named args = 3;
    required Types.Type returnTpe = 4;
    repeated Tree.Stmt statements = 5;
  }

}

message Program{
  repeated Tree.Function functions = 1;
}
