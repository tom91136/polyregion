// Copyright 2017 The Clspv Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// THIS FILE IS AUTOGENERATED - DO NOT EDIT!
#ifndef _HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_C_STRINGS_HPP
#define _HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_C_STRINGS_HPP
#include "spirv/unified1/spirv.hpp"
namespace spv{
const char* getOpName(const Op thing) {
  switch (thing) {
    case spv::OpNop: return "OpNop";
    case spv::OpUndef: return "OpUndef";
    case spv::OpSourceContinued: return "OpSourceContinued";
    case spv::OpSource: return "OpSource";
    case spv::OpSourceExtension: return "OpSourceExtension";
    case spv::OpName: return "OpName";
    case spv::OpMemberName: return "OpMemberName";
    case spv::OpString: return "OpString";
    case spv::OpLine: return "OpLine";
    case spv::OpExtension: return "OpExtension";
    case spv::OpExtInstImport: return "OpExtInstImport";
    case spv::OpExtInst: return "OpExtInst";
    case spv::OpMemoryModel: return "OpMemoryModel";
    case spv::OpEntryPoint: return "OpEntryPoint";
    case spv::OpExecutionMode: return "OpExecutionMode";
    case spv::OpCapability: return "OpCapability";
    case spv::OpTypeVoid: return "OpTypeVoid";
    case spv::OpTypeBool: return "OpTypeBool";
    case spv::OpTypeInt: return "OpTypeInt";
    case spv::OpTypeFloat: return "OpTypeFloat";
    case spv::OpTypeVector: return "OpTypeVector";
    case spv::OpTypeMatrix: return "OpTypeMatrix";
    case spv::OpTypeImage: return "OpTypeImage";
    case spv::OpTypeSampler: return "OpTypeSampler";
    case spv::OpTypeSampledImage: return "OpTypeSampledImage";
    case spv::OpTypeArray: return "OpTypeArray";
    case spv::OpTypeRuntimeArray: return "OpTypeRuntimeArray";
    case spv::OpTypeStruct: return "OpTypeStruct";
    case spv::OpTypeOpaque: return "OpTypeOpaque";
    case spv::OpTypePointer: return "OpTypePointer";
    case spv::OpTypeFunction: return "OpTypeFunction";
    case spv::OpTypeEvent: return "OpTypeEvent";
    case spv::OpTypeDeviceEvent: return "OpTypeDeviceEvent";
    case spv::OpTypeReserveId: return "OpTypeReserveId";
    case spv::OpTypeQueue: return "OpTypeQueue";
    case spv::OpTypePipe: return "OpTypePipe";
    case spv::OpTypeForwardPointer: return "OpTypeForwardPointer";
    case spv::OpConstantTrue: return "OpConstantTrue";
    case spv::OpConstantFalse: return "OpConstantFalse";
    case spv::OpConstant: return "OpConstant";
    case spv::OpConstantComposite: return "OpConstantComposite";
    case spv::OpConstantSampler: return "OpConstantSampler";
    case spv::OpConstantNull: return "OpConstantNull";
    case spv::OpSpecConstantTrue: return "OpSpecConstantTrue";
    case spv::OpSpecConstantFalse: return "OpSpecConstantFalse";
    case spv::OpSpecConstant: return "OpSpecConstant";
    case spv::OpSpecConstantComposite: return "OpSpecConstantComposite";
    case spv::OpSpecConstantOp: return "OpSpecConstantOp";
    case spv::OpFunction: return "OpFunction";
    case spv::OpFunctionParameter: return "OpFunctionParameter";
    case spv::OpFunctionEnd: return "OpFunctionEnd";
    case spv::OpFunctionCall: return "OpFunctionCall";
    case spv::OpVariable: return "OpVariable";
    case spv::OpImageTexelPointer: return "OpImageTexelPointer";
    case spv::OpLoad: return "OpLoad";
    case spv::OpStore: return "OpStore";
    case spv::OpCopyMemory: return "OpCopyMemory";
    case spv::OpCopyMemorySized: return "OpCopyMemorySized";
    case spv::OpAccessChain: return "OpAccessChain";
    case spv::OpInBoundsAccessChain: return "OpInBoundsAccessChain";
    case spv::OpPtrAccessChain: return "OpPtrAccessChain";
    case spv::OpArrayLength: return "OpArrayLength";
    case spv::OpGenericPtrMemSemantics: return "OpGenericPtrMemSemantics";
    case spv::OpInBoundsPtrAccessChain: return "OpInBoundsPtrAccessChain";
    case spv::OpDecorate: return "OpDecorate";
    case spv::OpMemberDecorate: return "OpMemberDecorate";
    case spv::OpDecorationGroup: return "OpDecorationGroup";
    case spv::OpGroupDecorate: return "OpGroupDecorate";
    case spv::OpGroupMemberDecorate: return "OpGroupMemberDecorate";
    case spv::OpVectorExtractDynamic: return "OpVectorExtractDynamic";
    case spv::OpVectorInsertDynamic: return "OpVectorInsertDynamic";
    case spv::OpVectorShuffle: return "OpVectorShuffle";
    case spv::OpCompositeConstruct: return "OpCompositeConstruct";
    case spv::OpCompositeExtract: return "OpCompositeExtract";
    case spv::OpCompositeInsert: return "OpCompositeInsert";
    case spv::OpCopyObject: return "OpCopyObject";
    case spv::OpTranspose: return "OpTranspose";
    case spv::OpSampledImage: return "OpSampledImage";
    case spv::OpImageSampleImplicitLod: return "OpImageSampleImplicitLod";
    case spv::OpImageSampleExplicitLod: return "OpImageSampleExplicitLod";
    case spv::OpImageSampleDrefImplicitLod: return "OpImageSampleDrefImplicitLod";
    case spv::OpImageSampleDrefExplicitLod: return "OpImageSampleDrefExplicitLod";
    case spv::OpImageSampleProjImplicitLod: return "OpImageSampleProjImplicitLod";
    case spv::OpImageSampleProjExplicitLod: return "OpImageSampleProjExplicitLod";
    case spv::OpImageSampleProjDrefImplicitLod: return "OpImageSampleProjDrefImplicitLod";
    case spv::OpImageSampleProjDrefExplicitLod: return "OpImageSampleProjDrefExplicitLod";
    case spv::OpImageFetch: return "OpImageFetch";
    case spv::OpImageGather: return "OpImageGather";
    case spv::OpImageDrefGather: return "OpImageDrefGather";
    case spv::OpImageRead: return "OpImageRead";
    case spv::OpImageWrite: return "OpImageWrite";
    case spv::OpImage: return "OpImage";
    case spv::OpImageQueryFormat: return "OpImageQueryFormat";
    case spv::OpImageQueryOrder: return "OpImageQueryOrder";
    case spv::OpImageQuerySizeLod: return "OpImageQuerySizeLod";
    case spv::OpImageQuerySize: return "OpImageQuerySize";
    case spv::OpImageQueryLod: return "OpImageQueryLod";
    case spv::OpImageQueryLevels: return "OpImageQueryLevels";
    case spv::OpImageQuerySamples: return "OpImageQuerySamples";
    case spv::OpConvertFToU: return "OpConvertFToU";
    case spv::OpConvertFToS: return "OpConvertFToS";
    case spv::OpConvertSToF: return "OpConvertSToF";
    case spv::OpConvertUToF: return "OpConvertUToF";
    case spv::OpUConvert: return "OpUConvert";
    case spv::OpSConvert: return "OpSConvert";
    case spv::OpFConvert: return "OpFConvert";
    case spv::OpQuantizeToF16: return "OpQuantizeToF16";
    case spv::OpConvertPtrToU: return "OpConvertPtrToU";
    case spv::OpSatConvertSToU: return "OpSatConvertSToU";
    case spv::OpSatConvertUToS: return "OpSatConvertUToS";
    case spv::OpConvertUToPtr: return "OpConvertUToPtr";
    case spv::OpPtrCastToGeneric: return "OpPtrCastToGeneric";
    case spv::OpGenericCastToPtr: return "OpGenericCastToPtr";
    case spv::OpGenericCastToPtrExplicit: return "OpGenericCastToPtrExplicit";
    case spv::OpBitcast: return "OpBitcast";
    case spv::OpSNegate: return "OpSNegate";
    case spv::OpFNegate: return "OpFNegate";
    case spv::OpIAdd: return "OpIAdd";
    case spv::OpFAdd: return "OpFAdd";
    case spv::OpISub: return "OpISub";
    case spv::OpFSub: return "OpFSub";
    case spv::OpIMul: return "OpIMul";
    case spv::OpFMul: return "OpFMul";
    case spv::OpUDiv: return "OpUDiv";
    case spv::OpSDiv: return "OpSDiv";
    case spv::OpFDiv: return "OpFDiv";
    case spv::OpUMod: return "OpUMod";
    case spv::OpSRem: return "OpSRem";
    case spv::OpSMod: return "OpSMod";
    case spv::OpFRem: return "OpFRem";
    case spv::OpFMod: return "OpFMod";
    case spv::OpVectorTimesScalar: return "OpVectorTimesScalar";
    case spv::OpMatrixTimesScalar: return "OpMatrixTimesScalar";
    case spv::OpVectorTimesMatrix: return "OpVectorTimesMatrix";
    case spv::OpMatrixTimesVector: return "OpMatrixTimesVector";
    case spv::OpMatrixTimesMatrix: return "OpMatrixTimesMatrix";
    case spv::OpOuterProduct: return "OpOuterProduct";
    case spv::OpDot: return "OpDot";
    case spv::OpIAddCarry: return "OpIAddCarry";
    case spv::OpISubBorrow: return "OpISubBorrow";
    case spv::OpUMulExtended: return "OpUMulExtended";
    case spv::OpSMulExtended: return "OpSMulExtended";
    case spv::OpAny: return "OpAny";
    case spv::OpAll: return "OpAll";
    case spv::OpIsNan: return "OpIsNan";
    case spv::OpIsInf: return "OpIsInf";
    case spv::OpIsFinite: return "OpIsFinite";
    case spv::OpIsNormal: return "OpIsNormal";
    case spv::OpSignBitSet: return "OpSignBitSet";
    case spv::OpLessOrGreater: return "OpLessOrGreater";
    case spv::OpOrdered: return "OpOrdered";
    case spv::OpUnordered: return "OpUnordered";
    case spv::OpLogicalEqual: return "OpLogicalEqual";
    case spv::OpLogicalNotEqual: return "OpLogicalNotEqual";
    case spv::OpLogicalOr: return "OpLogicalOr";
    case spv::OpLogicalAnd: return "OpLogicalAnd";
    case spv::OpLogicalNot: return "OpLogicalNot";
    case spv::OpSelect: return "OpSelect";
    case spv::OpIEqual: return "OpIEqual";
    case spv::OpINotEqual: return "OpINotEqual";
    case spv::OpUGreaterThan: return "OpUGreaterThan";
    case spv::OpSGreaterThan: return "OpSGreaterThan";
    case spv::OpUGreaterThanEqual: return "OpUGreaterThanEqual";
    case spv::OpSGreaterThanEqual: return "OpSGreaterThanEqual";
    case spv::OpULessThan: return "OpULessThan";
    case spv::OpSLessThan: return "OpSLessThan";
    case spv::OpULessThanEqual: return "OpULessThanEqual";
    case spv::OpSLessThanEqual: return "OpSLessThanEqual";
    case spv::OpFOrdEqual: return "OpFOrdEqual";
    case spv::OpFUnordEqual: return "OpFUnordEqual";
    case spv::OpFOrdNotEqual: return "OpFOrdNotEqual";
    case spv::OpFUnordNotEqual: return "OpFUnordNotEqual";
    case spv::OpFOrdLessThan: return "OpFOrdLessThan";
    case spv::OpFUnordLessThan: return "OpFUnordLessThan";
    case spv::OpFOrdGreaterThan: return "OpFOrdGreaterThan";
    case spv::OpFUnordGreaterThan: return "OpFUnordGreaterThan";
    case spv::OpFOrdLessThanEqual: return "OpFOrdLessThanEqual";
    case spv::OpFUnordLessThanEqual: return "OpFUnordLessThanEqual";
    case spv::OpFOrdGreaterThanEqual: return "OpFOrdGreaterThanEqual";
    case spv::OpFUnordGreaterThanEqual: return "OpFUnordGreaterThanEqual";
    case spv::OpShiftRightLogical: return "OpShiftRightLogical";
    case spv::OpShiftRightArithmetic: return "OpShiftRightArithmetic";
    case spv::OpShiftLeftLogical: return "OpShiftLeftLogical";
    case spv::OpBitwiseOr: return "OpBitwiseOr";
    case spv::OpBitwiseXor: return "OpBitwiseXor";
    case spv::OpBitwiseAnd: return "OpBitwiseAnd";
    case spv::OpNot: return "OpNot";
    case spv::OpBitFieldInsert: return "OpBitFieldInsert";
    case spv::OpBitFieldSExtract: return "OpBitFieldSExtract";
    case spv::OpBitFieldUExtract: return "OpBitFieldUExtract";
    case spv::OpBitReverse: return "OpBitReverse";
    case spv::OpBitCount: return "OpBitCount";
    case spv::OpDPdx: return "OpDPdx";
    case spv::OpDPdy: return "OpDPdy";
    case spv::OpFwidth: return "OpFwidth";
    case spv::OpDPdxFine: return "OpDPdxFine";
    case spv::OpDPdyFine: return "OpDPdyFine";
    case spv::OpFwidthFine: return "OpFwidthFine";
    case spv::OpDPdxCoarse: return "OpDPdxCoarse";
    case spv::OpDPdyCoarse: return "OpDPdyCoarse";
    case spv::OpFwidthCoarse: return "OpFwidthCoarse";
    case spv::OpEmitVertex: return "OpEmitVertex";
    case spv::OpEndPrimitive: return "OpEndPrimitive";
    case spv::OpEmitStreamVertex: return "OpEmitStreamVertex";
    case spv::OpEndStreamPrimitive: return "OpEndStreamPrimitive";
    case spv::OpControlBarrier: return "OpControlBarrier";
    case spv::OpMemoryBarrier: return "OpMemoryBarrier";
    case spv::OpAtomicLoad: return "OpAtomicLoad";
    case spv::OpAtomicStore: return "OpAtomicStore";
    case spv::OpAtomicExchange: return "OpAtomicExchange";
    case spv::OpAtomicCompareExchange: return "OpAtomicCompareExchange";
    case spv::OpAtomicCompareExchangeWeak: return "OpAtomicCompareExchangeWeak";
    case spv::OpAtomicIIncrement: return "OpAtomicIIncrement";
    case spv::OpAtomicIDecrement: return "OpAtomicIDecrement";
    case spv::OpAtomicIAdd: return "OpAtomicIAdd";
    case spv::OpAtomicISub: return "OpAtomicISub";
    case spv::OpAtomicSMin: return "OpAtomicSMin";
    case spv::OpAtomicUMin: return "OpAtomicUMin";
    case spv::OpAtomicSMax: return "OpAtomicSMax";
    case spv::OpAtomicUMax: return "OpAtomicUMax";
    case spv::OpAtomicAnd: return "OpAtomicAnd";
    case spv::OpAtomicOr: return "OpAtomicOr";
    case spv::OpAtomicXor: return "OpAtomicXor";
    case spv::OpPhi: return "OpPhi";
    case spv::OpLoopMerge: return "OpLoopMerge";
    case spv::OpSelectionMerge: return "OpSelectionMerge";
    case spv::OpLabel: return "OpLabel";
    case spv::OpBranch: return "OpBranch";
    case spv::OpBranchConditional: return "OpBranchConditional";
    case spv::OpSwitch: return "OpSwitch";
    case spv::OpKill: return "OpKill";
    case spv::OpReturn: return "OpReturn";
    case spv::OpReturnValue: return "OpReturnValue";
    case spv::OpUnreachable: return "OpUnreachable";
    case spv::OpLifetimeStart: return "OpLifetimeStart";
    case spv::OpLifetimeStop: return "OpLifetimeStop";
    case spv::OpGroupAsyncCopy: return "OpGroupAsyncCopy";
    case spv::OpGroupWaitEvents: return "OpGroupWaitEvents";
    case spv::OpGroupAll: return "OpGroupAll";
    case spv::OpGroupAny: return "OpGroupAny";
    case spv::OpGroupBroadcast: return "OpGroupBroadcast";
    case spv::OpGroupIAdd: return "OpGroupIAdd";
    case spv::OpGroupFAdd: return "OpGroupFAdd";
    case spv::OpGroupFMin: return "OpGroupFMin";
    case spv::OpGroupUMin: return "OpGroupUMin";
    case spv::OpGroupSMin: return "OpGroupSMin";
    case spv::OpGroupFMax: return "OpGroupFMax";
    case spv::OpGroupUMax: return "OpGroupUMax";
    case spv::OpGroupSMax: return "OpGroupSMax";
    case spv::OpReadPipe: return "OpReadPipe";
    case spv::OpWritePipe: return "OpWritePipe";
    case spv::OpReservedReadPipe: return "OpReservedReadPipe";
    case spv::OpReservedWritePipe: return "OpReservedWritePipe";
    case spv::OpReserveReadPipePackets: return "OpReserveReadPipePackets";
    case spv::OpReserveWritePipePackets: return "OpReserveWritePipePackets";
    case spv::OpCommitReadPipe: return "OpCommitReadPipe";
    case spv::OpCommitWritePipe: return "OpCommitWritePipe";
    case spv::OpIsValidReserveId: return "OpIsValidReserveId";
    case spv::OpGetNumPipePackets: return "OpGetNumPipePackets";
    case spv::OpGetMaxPipePackets: return "OpGetMaxPipePackets";
    case spv::OpGroupReserveReadPipePackets: return "OpGroupReserveReadPipePackets";
    case spv::OpGroupReserveWritePipePackets: return "OpGroupReserveWritePipePackets";
    case spv::OpGroupCommitReadPipe: return "OpGroupCommitReadPipe";
    case spv::OpGroupCommitWritePipe: return "OpGroupCommitWritePipe";
    case spv::OpEnqueueMarker: return "OpEnqueueMarker";
    case spv::OpEnqueueKernel: return "OpEnqueueKernel";
    case spv::OpGetKernelNDrangeSubGroupCount: return "OpGetKernelNDrangeSubGroupCount";
    case spv::OpGetKernelNDrangeMaxSubGroupSize: return "OpGetKernelNDrangeMaxSubGroupSize";
    case spv::OpGetKernelWorkGroupSize: return "OpGetKernelWorkGroupSize";
    case spv::OpGetKernelPreferredWorkGroupSizeMultiple: return "OpGetKernelPreferredWorkGroupSizeMultiple";
    case spv::OpRetainEvent: return "OpRetainEvent";
    case spv::OpReleaseEvent: return "OpReleaseEvent";
    case spv::OpCreateUserEvent: return "OpCreateUserEvent";
    case spv::OpIsValidEvent: return "OpIsValidEvent";
    case spv::OpSetUserEventStatus: return "OpSetUserEventStatus";
    case spv::OpCaptureEventProfilingInfo: return "OpCaptureEventProfilingInfo";
    case spv::OpGetDefaultQueue: return "OpGetDefaultQueue";
    case spv::OpBuildNDRange: return "OpBuildNDRange";
    case spv::OpImageSparseSampleImplicitLod: return "OpImageSparseSampleImplicitLod";
    case spv::OpImageSparseSampleExplicitLod: return "OpImageSparseSampleExplicitLod";
    case spv::OpImageSparseSampleDrefImplicitLod: return "OpImageSparseSampleDrefImplicitLod";
    case spv::OpImageSparseSampleDrefExplicitLod: return "OpImageSparseSampleDrefExplicitLod";
    case spv::OpImageSparseSampleProjImplicitLod: return "OpImageSparseSampleProjImplicitLod";
    case spv::OpImageSparseSampleProjExplicitLod: return "OpImageSparseSampleProjExplicitLod";
    case spv::OpImageSparseSampleProjDrefImplicitLod: return "OpImageSparseSampleProjDrefImplicitLod";
    case spv::OpImageSparseSampleProjDrefExplicitLod: return "OpImageSparseSampleProjDrefExplicitLod";
    case spv::OpImageSparseFetch: return "OpImageSparseFetch";
    case spv::OpImageSparseGather: return "OpImageSparseGather";
    case spv::OpImageSparseDrefGather: return "OpImageSparseDrefGather";
    case spv::OpImageSparseTexelsResident: return "OpImageSparseTexelsResident";
    case spv::OpNoLine: return "OpNoLine";
    case spv::OpAtomicFlagTestAndSet: return "OpAtomicFlagTestAndSet";
    case spv::OpAtomicFlagClear: return "OpAtomicFlagClear";
    case spv::OpImageSparseRead: return "OpImageSparseRead";
    case spv::OpSizeOf: return "OpSizeOf";
    case spv::OpTypePipeStorage: return "OpTypePipeStorage";
    case spv::OpConstantPipeStorage: return "OpConstantPipeStorage";
    case spv::OpCreatePipeFromPipeStorage: return "OpCreatePipeFromPipeStorage";
    case spv::OpGetKernelLocalSizeForSubgroupCount: return "OpGetKernelLocalSizeForSubgroupCount";
    case spv::OpGetKernelMaxNumSubgroups: return "OpGetKernelMaxNumSubgroups";
    case spv::OpTypeNamedBarrier: return "OpTypeNamedBarrier";
    case spv::OpNamedBarrierInitialize: return "OpNamedBarrierInitialize";
    case spv::OpMemoryNamedBarrier: return "OpMemoryNamedBarrier";
    case spv::OpModuleProcessed: return "OpModuleProcessed";
    case spv::OpExecutionModeId: return "OpExecutionModeId";
    case spv::OpDecorateId: return "OpDecorateId";
    case spv::OpGroupNonUniformElect: return "OpGroupNonUniformElect";
    case spv::OpGroupNonUniformAll: return "OpGroupNonUniformAll";
    case spv::OpGroupNonUniformAny: return "OpGroupNonUniformAny";
    case spv::OpGroupNonUniformAllEqual: return "OpGroupNonUniformAllEqual";
    case spv::OpGroupNonUniformBroadcast: return "OpGroupNonUniformBroadcast";
    case spv::OpGroupNonUniformBroadcastFirst: return "OpGroupNonUniformBroadcastFirst";
    case spv::OpGroupNonUniformBallot: return "OpGroupNonUniformBallot";
    case spv::OpGroupNonUniformInverseBallot: return "OpGroupNonUniformInverseBallot";
    case spv::OpGroupNonUniformBallotBitExtract: return "OpGroupNonUniformBallotBitExtract";
    case spv::OpGroupNonUniformBallotBitCount: return "OpGroupNonUniformBallotBitCount";
    case spv::OpGroupNonUniformBallotFindLSB: return "OpGroupNonUniformBallotFindLSB";
    case spv::OpGroupNonUniformBallotFindMSB: return "OpGroupNonUniformBallotFindMSB";
    case spv::OpGroupNonUniformShuffle: return "OpGroupNonUniformShuffle";
    case spv::OpGroupNonUniformShuffleXor: return "OpGroupNonUniformShuffleXor";
    case spv::OpGroupNonUniformShuffleUp: return "OpGroupNonUniformShuffleUp";
    case spv::OpGroupNonUniformShuffleDown: return "OpGroupNonUniformShuffleDown";
    case spv::OpGroupNonUniformIAdd: return "OpGroupNonUniformIAdd";
    case spv::OpGroupNonUniformFAdd: return "OpGroupNonUniformFAdd";
    case spv::OpGroupNonUniformIMul: return "OpGroupNonUniformIMul";
    case spv::OpGroupNonUniformFMul: return "OpGroupNonUniformFMul";
    case spv::OpGroupNonUniformSMin: return "OpGroupNonUniformSMin";
    case spv::OpGroupNonUniformUMin: return "OpGroupNonUniformUMin";
    case spv::OpGroupNonUniformFMin: return "OpGroupNonUniformFMin";
    case spv::OpGroupNonUniformSMax: return "OpGroupNonUniformSMax";
    case spv::OpGroupNonUniformUMax: return "OpGroupNonUniformUMax";
    case spv::OpGroupNonUniformFMax: return "OpGroupNonUniformFMax";
    case spv::OpGroupNonUniformBitwiseAnd: return "OpGroupNonUniformBitwiseAnd";
    case spv::OpGroupNonUniformBitwiseOr: return "OpGroupNonUniformBitwiseOr";
    case spv::OpGroupNonUniformBitwiseXor: return "OpGroupNonUniformBitwiseXor";
    case spv::OpGroupNonUniformLogicalAnd: return "OpGroupNonUniformLogicalAnd";
    case spv::OpGroupNonUniformLogicalOr: return "OpGroupNonUniformLogicalOr";
    case spv::OpGroupNonUniformLogicalXor: return "OpGroupNonUniformLogicalXor";
    case spv::OpGroupNonUniformQuadBroadcast: return "OpGroupNonUniformQuadBroadcast";
    case spv::OpGroupNonUniformQuadSwap: return "OpGroupNonUniformQuadSwap";
    case spv::OpCopyLogical: return "OpCopyLogical";
    case spv::OpPtrEqual: return "OpPtrEqual";
    case spv::OpPtrNotEqual: return "OpPtrNotEqual";
    case spv::OpPtrDiff: return "OpPtrDiff";
    case spv::OpTerminateInvocation: return "OpTerminateInvocation";
    case spv::OpSubgroupBallotKHR: return "OpSubgroupBallotKHR";
    case spv::OpSubgroupFirstInvocationKHR: return "OpSubgroupFirstInvocationKHR";
    case spv::OpSubgroupAllKHR: return "OpSubgroupAllKHR";
    case spv::OpSubgroupAnyKHR: return "OpSubgroupAnyKHR";
    case spv::OpSubgroupAllEqualKHR: return "OpSubgroupAllEqualKHR";
    case spv::OpGroupNonUniformRotateKHR: return "OpGroupNonUniformRotateKHR";
    case spv::OpSubgroupReadInvocationKHR: return "OpSubgroupReadInvocationKHR";
    case spv::OpTraceRayKHR: return "OpTraceRayKHR";
    case spv::OpExecuteCallableKHR: return "OpExecuteCallableKHR";
    case spv::OpConvertUToAccelerationStructureKHR: return "OpConvertUToAccelerationStructureKHR";
    case spv::OpIgnoreIntersectionKHR: return "OpIgnoreIntersectionKHR";
    case spv::OpTerminateRayKHR: return "OpTerminateRayKHR";
    case spv::OpSDot: return "OpSDot";
    case spv::OpUDot: return "OpUDot";
    case spv::OpSUDot: return "OpSUDot";
    case spv::OpSDotAccSat: return "OpSDotAccSat";
    case spv::OpUDotAccSat: return "OpUDotAccSat";
    case spv::OpSUDotAccSat: return "OpSUDotAccSat";
    case spv::OpTypeRayQueryKHR: return "OpTypeRayQueryKHR";
    case spv::OpRayQueryInitializeKHR: return "OpRayQueryInitializeKHR";
    case spv::OpRayQueryTerminateKHR: return "OpRayQueryTerminateKHR";
    case spv::OpRayQueryGenerateIntersectionKHR: return "OpRayQueryGenerateIntersectionKHR";
    case spv::OpRayQueryConfirmIntersectionKHR: return "OpRayQueryConfirmIntersectionKHR";
    case spv::OpRayQueryProceedKHR: return "OpRayQueryProceedKHR";
    case spv::OpRayQueryGetIntersectionTypeKHR: return "OpRayQueryGetIntersectionTypeKHR";
    case spv::OpGroupIAddNonUniformAMD: return "OpGroupIAddNonUniformAMD";
    case spv::OpGroupFAddNonUniformAMD: return "OpGroupFAddNonUniformAMD";
    case spv::OpGroupFMinNonUniformAMD: return "OpGroupFMinNonUniformAMD";
    case spv::OpGroupUMinNonUniformAMD: return "OpGroupUMinNonUniformAMD";
    case spv::OpGroupSMinNonUniformAMD: return "OpGroupSMinNonUniformAMD";
    case spv::OpGroupFMaxNonUniformAMD: return "OpGroupFMaxNonUniformAMD";
    case spv::OpGroupUMaxNonUniformAMD: return "OpGroupUMaxNonUniformAMD";
    case spv::OpGroupSMaxNonUniformAMD: return "OpGroupSMaxNonUniformAMD";
    case spv::OpFragmentMaskFetchAMD: return "OpFragmentMaskFetchAMD";
    case spv::OpFragmentFetchAMD: return "OpFragmentFetchAMD";
    case spv::OpReadClockKHR: return "OpReadClockKHR";
    case spv::OpHitObjectRecordHitMotionNV: return "OpHitObjectRecordHitMotionNV";
    case spv::OpHitObjectRecordHitWithIndexMotionNV: return "OpHitObjectRecordHitWithIndexMotionNV";
    case spv::OpHitObjectRecordMissMotionNV: return "OpHitObjectRecordMissMotionNV";
    case spv::OpHitObjectGetWorldToObjectNV: return "OpHitObjectGetWorldToObjectNV";
    case spv::OpHitObjectGetObjectToWorldNV: return "OpHitObjectGetObjectToWorldNV";
    case spv::OpHitObjectGetObjectRayDirectionNV: return "OpHitObjectGetObjectRayDirectionNV";
    case spv::OpHitObjectGetObjectRayOriginNV: return "OpHitObjectGetObjectRayOriginNV";
    case spv::OpHitObjectTraceRayMotionNV: return "OpHitObjectTraceRayMotionNV";
    case spv::OpHitObjectGetShaderRecordBufferHandleNV: return "OpHitObjectGetShaderRecordBufferHandleNV";
    case spv::OpHitObjectGetShaderBindingTableRecordIndexNV: return "OpHitObjectGetShaderBindingTableRecordIndexNV";
    case spv::OpHitObjectRecordEmptyNV: return "OpHitObjectRecordEmptyNV";
    case spv::OpHitObjectTraceRayNV: return "OpHitObjectTraceRayNV";
    case spv::OpHitObjectRecordHitNV: return "OpHitObjectRecordHitNV";
    case spv::OpHitObjectRecordHitWithIndexNV: return "OpHitObjectRecordHitWithIndexNV";
    case spv::OpHitObjectRecordMissNV: return "OpHitObjectRecordMissNV";
    case spv::OpHitObjectExecuteShaderNV: return "OpHitObjectExecuteShaderNV";
    case spv::OpHitObjectGetCurrentTimeNV: return "OpHitObjectGetCurrentTimeNV";
    case spv::OpHitObjectGetAttributesNV: return "OpHitObjectGetAttributesNV";
    case spv::OpHitObjectGetHitKindNV: return "OpHitObjectGetHitKindNV";
    case spv::OpHitObjectGetPrimitiveIndexNV: return "OpHitObjectGetPrimitiveIndexNV";
    case spv::OpHitObjectGetGeometryIndexNV: return "OpHitObjectGetGeometryIndexNV";
    case spv::OpHitObjectGetInstanceIdNV: return "OpHitObjectGetInstanceIdNV";
    case spv::OpHitObjectGetInstanceCustomIndexNV: return "OpHitObjectGetInstanceCustomIndexNV";
    case spv::OpHitObjectGetWorldRayDirectionNV: return "OpHitObjectGetWorldRayDirectionNV";
    case spv::OpHitObjectGetWorldRayOriginNV: return "OpHitObjectGetWorldRayOriginNV";
    case spv::OpHitObjectGetRayTMaxNV: return "OpHitObjectGetRayTMaxNV";
    case spv::OpHitObjectGetRayTMinNV: return "OpHitObjectGetRayTMinNV";
    case spv::OpHitObjectIsEmptyNV: return "OpHitObjectIsEmptyNV";
    case spv::OpHitObjectIsHitNV: return "OpHitObjectIsHitNV";
    case spv::OpHitObjectIsMissNV: return "OpHitObjectIsMissNV";
    case spv::OpReorderThreadWithHitObjectNV: return "OpReorderThreadWithHitObjectNV";
    case spv::OpReorderThreadWithHintNV: return "OpReorderThreadWithHintNV";
    case spv::OpTypeHitObjectNV: return "OpTypeHitObjectNV";
    case spv::OpImageSampleFootprintNV: return "OpImageSampleFootprintNV";
    case spv::OpEmitMeshTasksEXT: return "OpEmitMeshTasksEXT";
    case spv::OpSetMeshOutputsEXT: return "OpSetMeshOutputsEXT";
    case spv::OpGroupNonUniformPartitionNV: return "OpGroupNonUniformPartitionNV";
    case spv::OpWritePackedPrimitiveIndices4x8NV: return "OpWritePackedPrimitiveIndices4x8NV";
    case spv::OpReportIntersectionKHR: return "OpReportIntersectionKHR";
    case spv::OpIgnoreIntersectionNV: return "OpIgnoreIntersectionNV";
    case spv::OpTerminateRayNV: return "OpTerminateRayNV";
    case spv::OpTraceNV: return "OpTraceNV";
    case spv::OpTraceMotionNV: return "OpTraceMotionNV";
    case spv::OpTraceRayMotionNV: return "OpTraceRayMotionNV";
    case spv::OpTypeAccelerationStructureKHR: return "OpTypeAccelerationStructureKHR";
    case spv::OpExecuteCallableNV: return "OpExecuteCallableNV";
    case spv::OpTypeCooperativeMatrixNV: return "OpTypeCooperativeMatrixNV";
    case spv::OpCooperativeMatrixLoadNV: return "OpCooperativeMatrixLoadNV";
    case spv::OpCooperativeMatrixStoreNV: return "OpCooperativeMatrixStoreNV";
    case spv::OpCooperativeMatrixMulAddNV: return "OpCooperativeMatrixMulAddNV";
    case spv::OpCooperativeMatrixLengthNV: return "OpCooperativeMatrixLengthNV";
    case spv::OpBeginInvocationInterlockEXT: return "OpBeginInvocationInterlockEXT";
    case spv::OpEndInvocationInterlockEXT: return "OpEndInvocationInterlockEXT";
    case spv::OpDemoteToHelperInvocation: return "OpDemoteToHelperInvocation";
    case spv::OpIsHelperInvocationEXT: return "OpIsHelperInvocationEXT";
    case spv::OpConvertUToImageNV: return "OpConvertUToImageNV";
    case spv::OpConvertUToSamplerNV: return "OpConvertUToSamplerNV";
    case spv::OpConvertImageToUNV: return "OpConvertImageToUNV";
    case spv::OpConvertSamplerToUNV: return "OpConvertSamplerToUNV";
    case spv::OpConvertUToSampledImageNV: return "OpConvertUToSampledImageNV";
    case spv::OpConvertSampledImageToUNV: return "OpConvertSampledImageToUNV";
    case spv::OpSamplerImageAddressingModeNV: return "OpSamplerImageAddressingModeNV";
    case spv::OpSubgroupShuffleINTEL: return "OpSubgroupShuffleINTEL";
    case spv::OpSubgroupShuffleDownINTEL: return "OpSubgroupShuffleDownINTEL";
    case spv::OpSubgroupShuffleUpINTEL: return "OpSubgroupShuffleUpINTEL";
    case spv::OpSubgroupShuffleXorINTEL: return "OpSubgroupShuffleXorINTEL";
    case spv::OpSubgroupBlockReadINTEL: return "OpSubgroupBlockReadINTEL";
    case spv::OpSubgroupBlockWriteINTEL: return "OpSubgroupBlockWriteINTEL";
    case spv::OpSubgroupImageBlockReadINTEL: return "OpSubgroupImageBlockReadINTEL";
    case spv::OpSubgroupImageBlockWriteINTEL: return "OpSubgroupImageBlockWriteINTEL";
    case spv::OpSubgroupImageMediaBlockReadINTEL: return "OpSubgroupImageMediaBlockReadINTEL";
    case spv::OpSubgroupImageMediaBlockWriteINTEL: return "OpSubgroupImageMediaBlockWriteINTEL";
    case spv::OpUCountLeadingZerosINTEL: return "OpUCountLeadingZerosINTEL";
    case spv::OpUCountTrailingZerosINTEL: return "OpUCountTrailingZerosINTEL";
    case spv::OpAbsISubINTEL: return "OpAbsISubINTEL";
    case spv::OpAbsUSubINTEL: return "OpAbsUSubINTEL";
    case spv::OpIAddSatINTEL: return "OpIAddSatINTEL";
    case spv::OpUAddSatINTEL: return "OpUAddSatINTEL";
    case spv::OpIAverageINTEL: return "OpIAverageINTEL";
    case spv::OpUAverageINTEL: return "OpUAverageINTEL";
    case spv::OpIAverageRoundedINTEL: return "OpIAverageRoundedINTEL";
    case spv::OpUAverageRoundedINTEL: return "OpUAverageRoundedINTEL";
    case spv::OpISubSatINTEL: return "OpISubSatINTEL";
    case spv::OpUSubSatINTEL: return "OpUSubSatINTEL";
    case spv::OpIMul32x16INTEL: return "OpIMul32x16INTEL";
    case spv::OpUMul32x16INTEL: return "OpUMul32x16INTEL";
    case spv::OpConstantFunctionPointerINTEL: return "OpConstantFunctionPointerINTEL";
    case spv::OpFunctionPointerCallINTEL: return "OpFunctionPointerCallINTEL";
    case spv::OpAsmTargetINTEL: return "OpAsmTargetINTEL";
    case spv::OpAsmINTEL: return "OpAsmINTEL";
    case spv::OpAsmCallINTEL: return "OpAsmCallINTEL";
    case spv::OpAtomicFMinEXT: return "OpAtomicFMinEXT";
    case spv::OpAtomicFMaxEXT: return "OpAtomicFMaxEXT";
    case spv::OpAssumeTrueKHR: return "OpAssumeTrueKHR";
    case spv::OpExpectKHR: return "OpExpectKHR";
    case spv::OpDecorateString: return "OpDecorateString";
    case spv::OpMemberDecorateString: return "OpMemberDecorateString";
    case spv::OpVmeImageINTEL: return "OpVmeImageINTEL";
    case spv::OpTypeVmeImageINTEL: return "OpTypeVmeImageINTEL";
    case spv::OpTypeAvcImePayloadINTEL: return "OpTypeAvcImePayloadINTEL";
    case spv::OpTypeAvcRefPayloadINTEL: return "OpTypeAvcRefPayloadINTEL";
    case spv::OpTypeAvcSicPayloadINTEL: return "OpTypeAvcSicPayloadINTEL";
    case spv::OpTypeAvcMcePayloadINTEL: return "OpTypeAvcMcePayloadINTEL";
    case spv::OpTypeAvcMceResultINTEL: return "OpTypeAvcMceResultINTEL";
    case spv::OpTypeAvcImeResultINTEL: return "OpTypeAvcImeResultINTEL";
    case spv::OpTypeAvcImeResultSingleReferenceStreamoutINTEL: return "OpTypeAvcImeResultSingleReferenceStreamoutINTEL";
    case spv::OpTypeAvcImeResultDualReferenceStreamoutINTEL: return "OpTypeAvcImeResultDualReferenceStreamoutINTEL";
    case spv::OpTypeAvcImeSingleReferenceStreaminINTEL: return "OpTypeAvcImeSingleReferenceStreaminINTEL";
    case spv::OpTypeAvcImeDualReferenceStreaminINTEL: return "OpTypeAvcImeDualReferenceStreaminINTEL";
    case spv::OpTypeAvcRefResultINTEL: return "OpTypeAvcRefResultINTEL";
    case spv::OpTypeAvcSicResultINTEL: return "OpTypeAvcSicResultINTEL";
    case spv::OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL: return "OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL";
    case spv::OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL: return "OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL: return "OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL";
    case spv::OpSubgroupAvcMceSetInterShapePenaltyINTEL: return "OpSubgroupAvcMceSetInterShapePenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL: return "OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL";
    case spv::OpSubgroupAvcMceSetInterDirectionPenaltyINTEL: return "OpSubgroupAvcMceSetInterDirectionPenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL: return "OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL: return "OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL";
    case spv::OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL: return "OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL";
    case spv::OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL: return "OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL";
    case spv::OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL: return "OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL";
    case spv::OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL: return "OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL";
    case spv::OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL: return "OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL: return "OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL";
    case spv::OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL: return "OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL";
    case spv::OpSubgroupAvcMceSetAcOnlyHaarINTEL: return "OpSubgroupAvcMceSetAcOnlyHaarINTEL";
    case spv::OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL: return "OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL";
    case spv::OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL: return "OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL";
    case spv::OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL: return "OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL";
    case spv::OpSubgroupAvcMceConvertToImePayloadINTEL: return "OpSubgroupAvcMceConvertToImePayloadINTEL";
    case spv::OpSubgroupAvcMceConvertToImeResultINTEL: return "OpSubgroupAvcMceConvertToImeResultINTEL";
    case spv::OpSubgroupAvcMceConvertToRefPayloadINTEL: return "OpSubgroupAvcMceConvertToRefPayloadINTEL";
    case spv::OpSubgroupAvcMceConvertToRefResultINTEL: return "OpSubgroupAvcMceConvertToRefResultINTEL";
    case spv::OpSubgroupAvcMceConvertToSicPayloadINTEL: return "OpSubgroupAvcMceConvertToSicPayloadINTEL";
    case spv::OpSubgroupAvcMceConvertToSicResultINTEL: return "OpSubgroupAvcMceConvertToSicResultINTEL";
    case spv::OpSubgroupAvcMceGetMotionVectorsINTEL: return "OpSubgroupAvcMceGetMotionVectorsINTEL";
    case spv::OpSubgroupAvcMceGetInterDistortionsINTEL: return "OpSubgroupAvcMceGetInterDistortionsINTEL";
    case spv::OpSubgroupAvcMceGetBestInterDistortionsINTEL: return "OpSubgroupAvcMceGetBestInterDistortionsINTEL";
    case spv::OpSubgroupAvcMceGetInterMajorShapeINTEL: return "OpSubgroupAvcMceGetInterMajorShapeINTEL";
    case spv::OpSubgroupAvcMceGetInterMinorShapeINTEL: return "OpSubgroupAvcMceGetInterMinorShapeINTEL";
    case spv::OpSubgroupAvcMceGetInterDirectionsINTEL: return "OpSubgroupAvcMceGetInterDirectionsINTEL";
    case spv::OpSubgroupAvcMceGetInterMotionVectorCountINTEL: return "OpSubgroupAvcMceGetInterMotionVectorCountINTEL";
    case spv::OpSubgroupAvcMceGetInterReferenceIdsINTEL: return "OpSubgroupAvcMceGetInterReferenceIdsINTEL";
    case spv::OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL: return "OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL";
    case spv::OpSubgroupAvcImeInitializeINTEL: return "OpSubgroupAvcImeInitializeINTEL";
    case spv::OpSubgroupAvcImeSetSingleReferenceINTEL: return "OpSubgroupAvcImeSetSingleReferenceINTEL";
    case spv::OpSubgroupAvcImeSetDualReferenceINTEL: return "OpSubgroupAvcImeSetDualReferenceINTEL";
    case spv::OpSubgroupAvcImeRefWindowSizeINTEL: return "OpSubgroupAvcImeRefWindowSizeINTEL";
    case spv::OpSubgroupAvcImeAdjustRefOffsetINTEL: return "OpSubgroupAvcImeAdjustRefOffsetINTEL";
    case spv::OpSubgroupAvcImeConvertToMcePayloadINTEL: return "OpSubgroupAvcImeConvertToMcePayloadINTEL";
    case spv::OpSubgroupAvcImeSetMaxMotionVectorCountINTEL: return "OpSubgroupAvcImeSetMaxMotionVectorCountINTEL";
    case spv::OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL: return "OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL";
    case spv::OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL: return "OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL";
    case spv::OpSubgroupAvcImeSetWeightedSadINTEL: return "OpSubgroupAvcImeSetWeightedSadINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL: return "OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithDualReferenceINTEL: return "OpSubgroupAvcImeEvaluateWithDualReferenceINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL: return "OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL: return "OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL: return "OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL: return "OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL: return "OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL";
    case spv::OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL: return "OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL";
    case spv::OpSubgroupAvcImeConvertToMceResultINTEL: return "OpSubgroupAvcImeConvertToMceResultINTEL";
    case spv::OpSubgroupAvcImeGetSingleReferenceStreaminINTEL: return "OpSubgroupAvcImeGetSingleReferenceStreaminINTEL";
    case spv::OpSubgroupAvcImeGetDualReferenceStreaminINTEL: return "OpSubgroupAvcImeGetDualReferenceStreaminINTEL";
    case spv::OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL: return "OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL";
    case spv::OpSubgroupAvcImeStripDualReferenceStreamoutINTEL: return "OpSubgroupAvcImeStripDualReferenceStreamoutINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL: return "OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL: return "OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL: return "OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL: return "OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL: return "OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL";
    case spv::OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL: return "OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL";
    case spv::OpSubgroupAvcImeGetBorderReachedINTEL: return "OpSubgroupAvcImeGetBorderReachedINTEL";
    case spv::OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL: return "OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL";
    case spv::OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL: return "OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL";
    case spv::OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL: return "OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL";
    case spv::OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL: return "OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL";
    case spv::OpSubgroupAvcFmeInitializeINTEL: return "OpSubgroupAvcFmeInitializeINTEL";
    case spv::OpSubgroupAvcBmeInitializeINTEL: return "OpSubgroupAvcBmeInitializeINTEL";
    case spv::OpSubgroupAvcRefConvertToMcePayloadINTEL: return "OpSubgroupAvcRefConvertToMcePayloadINTEL";
    case spv::OpSubgroupAvcRefSetBidirectionalMixDisableINTEL: return "OpSubgroupAvcRefSetBidirectionalMixDisableINTEL";
    case spv::OpSubgroupAvcRefSetBilinearFilterEnableINTEL: return "OpSubgroupAvcRefSetBilinearFilterEnableINTEL";
    case spv::OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL: return "OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL";
    case spv::OpSubgroupAvcRefEvaluateWithDualReferenceINTEL: return "OpSubgroupAvcRefEvaluateWithDualReferenceINTEL";
    case spv::OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL: return "OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL";
    case spv::OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL: return "OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL";
    case spv::OpSubgroupAvcRefConvertToMceResultINTEL: return "OpSubgroupAvcRefConvertToMceResultINTEL";
    case spv::OpSubgroupAvcSicInitializeINTEL: return "OpSubgroupAvcSicInitializeINTEL";
    case spv::OpSubgroupAvcSicConfigureSkcINTEL: return "OpSubgroupAvcSicConfigureSkcINTEL";
    case spv::OpSubgroupAvcSicConfigureIpeLumaINTEL: return "OpSubgroupAvcSicConfigureIpeLumaINTEL";
    case spv::OpSubgroupAvcSicConfigureIpeLumaChromaINTEL: return "OpSubgroupAvcSicConfigureIpeLumaChromaINTEL";
    case spv::OpSubgroupAvcSicGetMotionVectorMaskINTEL: return "OpSubgroupAvcSicGetMotionVectorMaskINTEL";
    case spv::OpSubgroupAvcSicConvertToMcePayloadINTEL: return "OpSubgroupAvcSicConvertToMcePayloadINTEL";
    case spv::OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL: return "OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL";
    case spv::OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL: return "OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL";
    case spv::OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL: return "OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL";
    case spv::OpSubgroupAvcSicSetBilinearFilterEnableINTEL: return "OpSubgroupAvcSicSetBilinearFilterEnableINTEL";
    case spv::OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL: return "OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL";
    case spv::OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL: return "OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL";
    case spv::OpSubgroupAvcSicEvaluateIpeINTEL: return "OpSubgroupAvcSicEvaluateIpeINTEL";
    case spv::OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL: return "OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL";
    case spv::OpSubgroupAvcSicEvaluateWithDualReferenceINTEL: return "OpSubgroupAvcSicEvaluateWithDualReferenceINTEL";
    case spv::OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL: return "OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL";
    case spv::OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL: return "OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL";
    case spv::OpSubgroupAvcSicConvertToMceResultINTEL: return "OpSubgroupAvcSicConvertToMceResultINTEL";
    case spv::OpSubgroupAvcSicGetIpeLumaShapeINTEL: return "OpSubgroupAvcSicGetIpeLumaShapeINTEL";
    case spv::OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL: return "OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL";
    case spv::OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL: return "OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL";
    case spv::OpSubgroupAvcSicGetPackedIpeLumaModesINTEL: return "OpSubgroupAvcSicGetPackedIpeLumaModesINTEL";
    case spv::OpSubgroupAvcSicGetIpeChromaModeINTEL: return "OpSubgroupAvcSicGetIpeChromaModeINTEL";
    case spv::OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL: return "OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL";
    case spv::OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL: return "OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL";
    case spv::OpSubgroupAvcSicGetInterRawSadsINTEL: return "OpSubgroupAvcSicGetInterRawSadsINTEL";
    case spv::OpVariableLengthArrayINTEL: return "OpVariableLengthArrayINTEL";
    case spv::OpSaveMemoryINTEL: return "OpSaveMemoryINTEL";
    case spv::OpRestoreMemoryINTEL: return "OpRestoreMemoryINTEL";
    case spv::OpArbitraryFloatSinCosPiINTEL: return "OpArbitraryFloatSinCosPiINTEL";
    case spv::OpArbitraryFloatCastINTEL: return "OpArbitraryFloatCastINTEL";
    case spv::OpArbitraryFloatCastFromIntINTEL: return "OpArbitraryFloatCastFromIntINTEL";
    case spv::OpArbitraryFloatCastToIntINTEL: return "OpArbitraryFloatCastToIntINTEL";
    case spv::OpArbitraryFloatAddINTEL: return "OpArbitraryFloatAddINTEL";
    case spv::OpArbitraryFloatSubINTEL: return "OpArbitraryFloatSubINTEL";
    case spv::OpArbitraryFloatMulINTEL: return "OpArbitraryFloatMulINTEL";
    case spv::OpArbitraryFloatDivINTEL: return "OpArbitraryFloatDivINTEL";
    case spv::OpArbitraryFloatGTINTEL: return "OpArbitraryFloatGTINTEL";
    case spv::OpArbitraryFloatGEINTEL: return "OpArbitraryFloatGEINTEL";
    case spv::OpArbitraryFloatLTINTEL: return "OpArbitraryFloatLTINTEL";
    case spv::OpArbitraryFloatLEINTEL: return "OpArbitraryFloatLEINTEL";
    case spv::OpArbitraryFloatEQINTEL: return "OpArbitraryFloatEQINTEL";
    case spv::OpArbitraryFloatRecipINTEL: return "OpArbitraryFloatRecipINTEL";
    case spv::OpArbitraryFloatRSqrtINTEL: return "OpArbitraryFloatRSqrtINTEL";
    case spv::OpArbitraryFloatCbrtINTEL: return "OpArbitraryFloatCbrtINTEL";
    case spv::OpArbitraryFloatHypotINTEL: return "OpArbitraryFloatHypotINTEL";
    case spv::OpArbitraryFloatSqrtINTEL: return "OpArbitraryFloatSqrtINTEL";
    case spv::OpArbitraryFloatLogINTEL: return "OpArbitraryFloatLogINTEL";
    case spv::OpArbitraryFloatLog2INTEL: return "OpArbitraryFloatLog2INTEL";
    case spv::OpArbitraryFloatLog10INTEL: return "OpArbitraryFloatLog10INTEL";
    case spv::OpArbitraryFloatLog1pINTEL: return "OpArbitraryFloatLog1pINTEL";
    case spv::OpArbitraryFloatExpINTEL: return "OpArbitraryFloatExpINTEL";
    case spv::OpArbitraryFloatExp2INTEL: return "OpArbitraryFloatExp2INTEL";
    case spv::OpArbitraryFloatExp10INTEL: return "OpArbitraryFloatExp10INTEL";
    case spv::OpArbitraryFloatExpm1INTEL: return "OpArbitraryFloatExpm1INTEL";
    case spv::OpArbitraryFloatSinINTEL: return "OpArbitraryFloatSinINTEL";
    case spv::OpArbitraryFloatCosINTEL: return "OpArbitraryFloatCosINTEL";
    case spv::OpArbitraryFloatSinCosINTEL: return "OpArbitraryFloatSinCosINTEL";
    case spv::OpArbitraryFloatSinPiINTEL: return "OpArbitraryFloatSinPiINTEL";
    case spv::OpArbitraryFloatCosPiINTEL: return "OpArbitraryFloatCosPiINTEL";
    case spv::OpArbitraryFloatASinINTEL: return "OpArbitraryFloatASinINTEL";
    case spv::OpArbitraryFloatASinPiINTEL: return "OpArbitraryFloatASinPiINTEL";
    case spv::OpArbitraryFloatACosINTEL: return "OpArbitraryFloatACosINTEL";
    case spv::OpArbitraryFloatACosPiINTEL: return "OpArbitraryFloatACosPiINTEL";
    case spv::OpArbitraryFloatATanINTEL: return "OpArbitraryFloatATanINTEL";
    case spv::OpArbitraryFloatATanPiINTEL: return "OpArbitraryFloatATanPiINTEL";
    case spv::OpArbitraryFloatATan2INTEL: return "OpArbitraryFloatATan2INTEL";
    case spv::OpArbitraryFloatPowINTEL: return "OpArbitraryFloatPowINTEL";
    case spv::OpArbitraryFloatPowRINTEL: return "OpArbitraryFloatPowRINTEL";
    case spv::OpArbitraryFloatPowNINTEL: return "OpArbitraryFloatPowNINTEL";
    case spv::OpLoopControlINTEL: return "OpLoopControlINTEL";
    case spv::OpAliasDomainDeclINTEL: return "OpAliasDomainDeclINTEL";
    case spv::OpAliasScopeDeclINTEL: return "OpAliasScopeDeclINTEL";
    case spv::OpAliasScopeListDeclINTEL: return "OpAliasScopeListDeclINTEL";
    case spv::OpFixedSqrtINTEL: return "OpFixedSqrtINTEL";
    case spv::OpFixedRecipINTEL: return "OpFixedRecipINTEL";
    case spv::OpFixedRsqrtINTEL: return "OpFixedRsqrtINTEL";
    case spv::OpFixedSinINTEL: return "OpFixedSinINTEL";
    case spv::OpFixedCosINTEL: return "OpFixedCosINTEL";
    case spv::OpFixedSinCosINTEL: return "OpFixedSinCosINTEL";
    case spv::OpFixedSinPiINTEL: return "OpFixedSinPiINTEL";
    case spv::OpFixedCosPiINTEL: return "OpFixedCosPiINTEL";
    case spv::OpFixedSinCosPiINTEL: return "OpFixedSinCosPiINTEL";
    case spv::OpFixedLogINTEL: return "OpFixedLogINTEL";
    case spv::OpFixedExpINTEL: return "OpFixedExpINTEL";
    case spv::OpPtrCastToCrossWorkgroupINTEL: return "OpPtrCastToCrossWorkgroupINTEL";
    case spv::OpCrossWorkgroupCastToPtrINTEL: return "OpCrossWorkgroupCastToPtrINTEL";
    case spv::OpReadPipeBlockingINTEL: return "OpReadPipeBlockingINTEL";
    case spv::OpWritePipeBlockingINTEL: return "OpWritePipeBlockingINTEL";
    case spv::OpFPGARegINTEL: return "OpFPGARegINTEL";
    case spv::OpRayQueryGetRayTMinKHR: return "OpRayQueryGetRayTMinKHR";
    case spv::OpRayQueryGetRayFlagsKHR: return "OpRayQueryGetRayFlagsKHR";
    case spv::OpRayQueryGetIntersectionTKHR: return "OpRayQueryGetIntersectionTKHR";
    case spv::OpRayQueryGetIntersectionInstanceCustomIndexKHR: return "OpRayQueryGetIntersectionInstanceCustomIndexKHR";
    case spv::OpRayQueryGetIntersectionInstanceIdKHR: return "OpRayQueryGetIntersectionInstanceIdKHR";
    case spv::OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR: return "OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR";
    case spv::OpRayQueryGetIntersectionGeometryIndexKHR: return "OpRayQueryGetIntersectionGeometryIndexKHR";
    case spv::OpRayQueryGetIntersectionPrimitiveIndexKHR: return "OpRayQueryGetIntersectionPrimitiveIndexKHR";
    case spv::OpRayQueryGetIntersectionBarycentricsKHR: return "OpRayQueryGetIntersectionBarycentricsKHR";
    case spv::OpRayQueryGetIntersectionFrontFaceKHR: return "OpRayQueryGetIntersectionFrontFaceKHR";
    case spv::OpRayQueryGetIntersectionCandidateAABBOpaqueKHR: return "OpRayQueryGetIntersectionCandidateAABBOpaqueKHR";
    case spv::OpRayQueryGetIntersectionObjectRayDirectionKHR: return "OpRayQueryGetIntersectionObjectRayDirectionKHR";
    case spv::OpRayQueryGetIntersectionObjectRayOriginKHR: return "OpRayQueryGetIntersectionObjectRayOriginKHR";
    case spv::OpRayQueryGetWorldRayDirectionKHR: return "OpRayQueryGetWorldRayDirectionKHR";
    case spv::OpRayQueryGetWorldRayOriginKHR: return "OpRayQueryGetWorldRayOriginKHR";
    case spv::OpRayQueryGetIntersectionObjectToWorldKHR: return "OpRayQueryGetIntersectionObjectToWorldKHR";
    case spv::OpRayQueryGetIntersectionWorldToObjectKHR: return "OpRayQueryGetIntersectionWorldToObjectKHR";
    case spv::OpAtomicFAddEXT: return "OpAtomicFAddEXT";
    case spv::OpTypeBufferSurfaceINTEL: return "OpTypeBufferSurfaceINTEL";
    case spv::OpTypeStructContinuedINTEL: return "OpTypeStructContinuedINTEL";
    case spv::OpConstantCompositeContinuedINTEL: return "OpConstantCompositeContinuedINTEL";
    case spv::OpSpecConstantCompositeContinuedINTEL: return "OpSpecConstantCompositeContinuedINTEL";
    case spv::OpControlBarrierArriveINTEL: return "OpControlBarrierArriveINTEL";
    case spv::OpControlBarrierWaitINTEL: return "OpControlBarrierWaitINTEL";
    case spv::OpGroupIMulKHR: return "OpGroupIMulKHR";
    case spv::OpGroupFMulKHR: return "OpGroupFMulKHR";
    case spv::OpGroupBitwiseAndKHR: return "OpGroupBitwiseAndKHR";
    case spv::OpGroupBitwiseOrKHR: return "OpGroupBitwiseOrKHR";
    case spv::OpGroupBitwiseXorKHR: return "OpGroupBitwiseXorKHR";
    case spv::OpGroupLogicalAndKHR: return "OpGroupLogicalAndKHR";
    case spv::OpGroupLogicalOrKHR: return "OpGroupLogicalOrKHR";
    case spv::OpGroupLogicalXorKHR: return "OpGroupLogicalXorKHR";
    default: return "";
  }
}
const char* getCapabilityName(const Capability thing) {
  switch (thing) {
    case spv::CapabilityMatrix: return "Matrix";
    case spv::CapabilityShader: return "Shader";
    case spv::CapabilityGeometry: return "Geometry";
    case spv::CapabilityTessellation: return "Tessellation";
    case spv::CapabilityAddresses: return "Addresses";
    case spv::CapabilityLinkage: return "Linkage";
    case spv::CapabilityKernel: return "Kernel";
    case spv::CapabilityVector16: return "Vector16";
    case spv::CapabilityFloat16Buffer: return "Float16Buffer";
    case spv::CapabilityFloat16: return "Float16";
    case spv::CapabilityFloat64: return "Float64";
    case spv::CapabilityInt64: return "Int64";
    case spv::CapabilityInt64Atomics: return "Int64Atomics";
    case spv::CapabilityImageBasic: return "ImageBasic";
    case spv::CapabilityImageReadWrite: return "ImageReadWrite";
    case spv::CapabilityImageMipmap: return "ImageMipmap";
    case spv::CapabilityPipes: return "Pipes";
    case spv::CapabilityGroups: return "Groups";
    case spv::CapabilityDeviceEnqueue: return "DeviceEnqueue";
    case spv::CapabilityLiteralSampler: return "LiteralSampler";
    case spv::CapabilityAtomicStorage: return "AtomicStorage";
    case spv::CapabilityInt16: return "Int16";
    case spv::CapabilityTessellationPointSize: return "TessellationPointSize";
    case spv::CapabilityGeometryPointSize: return "GeometryPointSize";
    case spv::CapabilityImageGatherExtended: return "ImageGatherExtended";
    case spv::CapabilityStorageImageMultisample: return "StorageImageMultisample";
    case spv::CapabilityUniformBufferArrayDynamicIndexing: return "UniformBufferArrayDynamicIndexing";
    case spv::CapabilitySampledImageArrayDynamicIndexing: return "SampledImageArrayDynamicIndexing";
    case spv::CapabilityStorageBufferArrayDynamicIndexing: return "StorageBufferArrayDynamicIndexing";
    case spv::CapabilityStorageImageArrayDynamicIndexing: return "StorageImageArrayDynamicIndexing";
    case spv::CapabilityClipDistance: return "ClipDistance";
    case spv::CapabilityCullDistance: return "CullDistance";
    case spv::CapabilityImageCubeArray: return "ImageCubeArray";
    case spv::CapabilitySampleRateShading: return "SampleRateShading";
    case spv::CapabilityImageRect: return "ImageRect";
    case spv::CapabilitySampledRect: return "SampledRect";
    case spv::CapabilityGenericPointer: return "GenericPointer";
    case spv::CapabilityInt8: return "Int8";
    case spv::CapabilityInputAttachment: return "InputAttachment";
    case spv::CapabilitySparseResidency: return "SparseResidency";
    case spv::CapabilityMinLod: return "MinLod";
    case spv::CapabilitySampled1D: return "Sampled1D";
    case spv::CapabilityImage1D: return "Image1D";
    case spv::CapabilitySampledCubeArray: return "SampledCubeArray";
    case spv::CapabilitySampledBuffer: return "SampledBuffer";
    case spv::CapabilityImageBuffer: return "ImageBuffer";
    case spv::CapabilityImageMSArray: return "ImageMSArray";
    case spv::CapabilityStorageImageExtendedFormats: return "StorageImageExtendedFormats";
    case spv::CapabilityImageQuery: return "ImageQuery";
    case spv::CapabilityDerivativeControl: return "DerivativeControl";
    case spv::CapabilityInterpolationFunction: return "InterpolationFunction";
    case spv::CapabilityTransformFeedback: return "TransformFeedback";
    case spv::CapabilityGeometryStreams: return "GeometryStreams";
    case spv::CapabilityStorageImageReadWithoutFormat: return "StorageImageReadWithoutFormat";
    case spv::CapabilityStorageImageWriteWithoutFormat: return "StorageImageWriteWithoutFormat";
    case spv::CapabilityMultiViewport: return "MultiViewport";
    case spv::CapabilitySubgroupDispatch: return "SubgroupDispatch";
    case spv::CapabilityNamedBarrier: return "NamedBarrier";
    case spv::CapabilityPipeStorage: return "PipeStorage";
    case spv::CapabilityGroupNonUniform: return "GroupNonUniform";
    case spv::CapabilityGroupNonUniformVote: return "GroupNonUniformVote";
    case spv::CapabilityGroupNonUniformArithmetic: return "GroupNonUniformArithmetic";
    case spv::CapabilityGroupNonUniformBallot: return "GroupNonUniformBallot";
    case spv::CapabilityGroupNonUniformShuffle: return "GroupNonUniformShuffle";
    case spv::CapabilityGroupNonUniformShuffleRelative: return "GroupNonUniformShuffleRelative";
    case spv::CapabilityGroupNonUniformClustered: return "GroupNonUniformClustered";
    case spv::CapabilityGroupNonUniformQuad: return "GroupNonUniformQuad";
    case spv::CapabilityShaderLayer: return "ShaderLayer";
    case spv::CapabilityShaderViewportIndex: return "ShaderViewportIndex";
    case spv::CapabilityUniformDecoration: return "UniformDecoration";
    case spv::CapabilityCoreBuiltinsARM: return "CoreBuiltinsARM";
    case spv::CapabilityFragmentShadingRateKHR: return "FragmentShadingRateKHR";
    case spv::CapabilitySubgroupBallotKHR: return "SubgroupBallotKHR";
    case spv::CapabilityDrawParameters: return "DrawParameters";
    case spv::CapabilityWorkgroupMemoryExplicitLayoutKHR: return "WorkgroupMemoryExplicitLayoutKHR";
    case spv::CapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR: return "WorkgroupMemoryExplicitLayout8BitAccessKHR";
    case spv::CapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR: return "WorkgroupMemoryExplicitLayout16BitAccessKHR";
    case spv::CapabilitySubgroupVoteKHR: return "SubgroupVoteKHR";
    case spv::CapabilityStorageBuffer16BitAccess: return "StorageBuffer16BitAccess";
    case spv::CapabilityUniformAndStorageBuffer16BitAccess: return "UniformAndStorageBuffer16BitAccess";
    case spv::CapabilityStoragePushConstant16: return "StoragePushConstant16";
    case spv::CapabilityStorageInputOutput16: return "StorageInputOutput16";
    case spv::CapabilityDeviceGroup: return "DeviceGroup";
    case spv::CapabilityMultiView: return "MultiView";
    case spv::CapabilityVariablePointersStorageBuffer: return "VariablePointersStorageBuffer";
    case spv::CapabilityVariablePointers: return "VariablePointers";
    case spv::CapabilityAtomicStorageOps: return "AtomicStorageOps";
    case spv::CapabilitySampleMaskPostDepthCoverage: return "SampleMaskPostDepthCoverage";
    case spv::CapabilityStorageBuffer8BitAccess: return "StorageBuffer8BitAccess";
    case spv::CapabilityUniformAndStorageBuffer8BitAccess: return "UniformAndStorageBuffer8BitAccess";
    case spv::CapabilityStoragePushConstant8: return "StoragePushConstant8";
    case spv::CapabilityDenormPreserve: return "DenormPreserve";
    case spv::CapabilityDenormFlushToZero: return "DenormFlushToZero";
    case spv::CapabilitySignedZeroInfNanPreserve: return "SignedZeroInfNanPreserve";
    case spv::CapabilityRoundingModeRTE: return "RoundingModeRTE";
    case spv::CapabilityRoundingModeRTZ: return "RoundingModeRTZ";
    case spv::CapabilityRayQueryProvisionalKHR: return "RayQueryProvisionalKHR";
    case spv::CapabilityRayQueryKHR: return "RayQueryKHR";
    case spv::CapabilityRayTraversalPrimitiveCullingKHR: return "RayTraversalPrimitiveCullingKHR";
    case spv::CapabilityRayTracingKHR: return "RayTracingKHR";
    case spv::CapabilityFloat16ImageAMD: return "Float16ImageAMD";
    case spv::CapabilityImageGatherBiasLodAMD: return "ImageGatherBiasLodAMD";
    case spv::CapabilityFragmentMaskAMD: return "FragmentMaskAMD";
    case spv::CapabilityStencilExportEXT: return "StencilExportEXT";
    case spv::CapabilityImageReadWriteLodAMD: return "ImageReadWriteLodAMD";
    case spv::CapabilityInt64ImageEXT: return "Int64ImageEXT";
    case spv::CapabilityShaderClockKHR: return "ShaderClockKHR";
    case spv::CapabilitySampleMaskOverrideCoverageNV: return "SampleMaskOverrideCoverageNV";
    case spv::CapabilityGeometryShaderPassthroughNV: return "GeometryShaderPassthroughNV";
    case spv::CapabilityShaderViewportIndexLayerEXT: return "ShaderViewportIndexLayerEXT";
    case spv::CapabilityShaderViewportMaskNV: return "ShaderViewportMaskNV";
    case spv::CapabilityShaderStereoViewNV: return "ShaderStereoViewNV";
    case spv::CapabilityPerViewAttributesNV: return "PerViewAttributesNV";
    case spv::CapabilityFragmentFullyCoveredEXT: return "FragmentFullyCoveredEXT";
    case spv::CapabilityMeshShadingNV: return "MeshShadingNV";
    case spv::CapabilityImageFootprintNV: return "ImageFootprintNV";
    case spv::CapabilityMeshShadingEXT: return "MeshShadingEXT";
    case spv::CapabilityFragmentBarycentricKHR: return "FragmentBarycentricKHR";
    case spv::CapabilityComputeDerivativeGroupQuadsNV: return "ComputeDerivativeGroupQuadsNV";
    case spv::CapabilityFragmentDensityEXT: return "FragmentDensityEXT";
    case spv::CapabilityGroupNonUniformPartitionedNV: return "GroupNonUniformPartitionedNV";
    case spv::CapabilityShaderNonUniform: return "ShaderNonUniform";
    case spv::CapabilityRuntimeDescriptorArray: return "RuntimeDescriptorArray";
    case spv::CapabilityInputAttachmentArrayDynamicIndexing: return "InputAttachmentArrayDynamicIndexing";
    case spv::CapabilityUniformTexelBufferArrayDynamicIndexing: return "UniformTexelBufferArrayDynamicIndexing";
    case spv::CapabilityStorageTexelBufferArrayDynamicIndexing: return "StorageTexelBufferArrayDynamicIndexing";
    case spv::CapabilityUniformBufferArrayNonUniformIndexing: return "UniformBufferArrayNonUniformIndexing";
    case spv::CapabilitySampledImageArrayNonUniformIndexing: return "SampledImageArrayNonUniformIndexing";
    case spv::CapabilityStorageBufferArrayNonUniformIndexing: return "StorageBufferArrayNonUniformIndexing";
    case spv::CapabilityStorageImageArrayNonUniformIndexing: return "StorageImageArrayNonUniformIndexing";
    case spv::CapabilityInputAttachmentArrayNonUniformIndexing: return "InputAttachmentArrayNonUniformIndexing";
    case spv::CapabilityUniformTexelBufferArrayNonUniformIndexing: return "UniformTexelBufferArrayNonUniformIndexing";
    case spv::CapabilityStorageTexelBufferArrayNonUniformIndexing: return "StorageTexelBufferArrayNonUniformIndexing";
    case spv::CapabilityRayTracingNV: return "RayTracingNV";
    case spv::CapabilityRayTracingMotionBlurNV: return "RayTracingMotionBlurNV";
    case spv::CapabilityVulkanMemoryModel: return "VulkanMemoryModel";
    case spv::CapabilityVulkanMemoryModelDeviceScope: return "VulkanMemoryModelDeviceScope";
    case spv::CapabilityPhysicalStorageBufferAddresses: return "PhysicalStorageBufferAddresses";
    case spv::CapabilityComputeDerivativeGroupLinearNV: return "ComputeDerivativeGroupLinearNV";
    case spv::CapabilityRayTracingProvisionalKHR: return "RayTracingProvisionalKHR";
    case spv::CapabilityCooperativeMatrixNV: return "CooperativeMatrixNV";
    case spv::CapabilityFragmentShaderSampleInterlockEXT: return "FragmentShaderSampleInterlockEXT";
    case spv::CapabilityFragmentShaderShadingRateInterlockEXT: return "FragmentShaderShadingRateInterlockEXT";
    case spv::CapabilityShaderSMBuiltinsNV: return "ShaderSMBuiltinsNV";
    case spv::CapabilityFragmentShaderPixelInterlockEXT: return "FragmentShaderPixelInterlockEXT";
    case spv::CapabilityDemoteToHelperInvocation: return "DemoteToHelperInvocation";
    case spv::CapabilityRayTracingOpacityMicromapEXT: return "RayTracingOpacityMicromapEXT";
    case spv::CapabilityShaderInvocationReorderNV: return "ShaderInvocationReorderNV";
    case spv::CapabilityBindlessTextureNV: return "BindlessTextureNV";
    case spv::CapabilitySubgroupShuffleINTEL: return "SubgroupShuffleINTEL";
    case spv::CapabilitySubgroupBufferBlockIOINTEL: return "SubgroupBufferBlockIOINTEL";
    case spv::CapabilitySubgroupImageBlockIOINTEL: return "SubgroupImageBlockIOINTEL";
    case spv::CapabilitySubgroupImageMediaBlockIOINTEL: return "SubgroupImageMediaBlockIOINTEL";
    case spv::CapabilityRoundToInfinityINTEL: return "RoundToInfinityINTEL";
    case spv::CapabilityFloatingPointModeINTEL: return "FloatingPointModeINTEL";
    case spv::CapabilityIntegerFunctions2INTEL: return "IntegerFunctions2INTEL";
    case spv::CapabilityFunctionPointersINTEL: return "FunctionPointersINTEL";
    case spv::CapabilityIndirectReferencesINTEL: return "IndirectReferencesINTEL";
    case spv::CapabilityAsmINTEL: return "AsmINTEL";
    case spv::CapabilityAtomicFloat32MinMaxEXT: return "AtomicFloat32MinMaxEXT";
    case spv::CapabilityAtomicFloat64MinMaxEXT: return "AtomicFloat64MinMaxEXT";
    case spv::CapabilityAtomicFloat16MinMaxEXT: return "AtomicFloat16MinMaxEXT";
    case spv::CapabilityVectorComputeINTEL: return "VectorComputeINTEL";
    case spv::CapabilityVectorAnyINTEL: return "VectorAnyINTEL";
    case spv::CapabilityExpectAssumeKHR: return "ExpectAssumeKHR";
    case spv::CapabilitySubgroupAvcMotionEstimationINTEL: return "SubgroupAvcMotionEstimationINTEL";
    case spv::CapabilitySubgroupAvcMotionEstimationIntraINTEL: return "SubgroupAvcMotionEstimationIntraINTEL";
    case spv::CapabilitySubgroupAvcMotionEstimationChromaINTEL: return "SubgroupAvcMotionEstimationChromaINTEL";
    case spv::CapabilityVariableLengthArrayINTEL: return "VariableLengthArrayINTEL";
    case spv::CapabilityFunctionFloatControlINTEL: return "FunctionFloatControlINTEL";
    case spv::CapabilityFPGAMemoryAttributesINTEL: return "FPGAMemoryAttributesINTEL";
    case spv::CapabilityFPFastMathModeINTEL: return "FPFastMathModeINTEL";
    case spv::CapabilityArbitraryPrecisionIntegersINTEL: return "ArbitraryPrecisionIntegersINTEL";
    case spv::CapabilityArbitraryPrecisionFloatingPointINTEL: return "ArbitraryPrecisionFloatingPointINTEL";
    case spv::CapabilityUnstructuredLoopControlsINTEL: return "UnstructuredLoopControlsINTEL";
    case spv::CapabilityFPGALoopControlsINTEL: return "FPGALoopControlsINTEL";
    case spv::CapabilityKernelAttributesINTEL: return "KernelAttributesINTEL";
    case spv::CapabilityFPGAKernelAttributesINTEL: return "FPGAKernelAttributesINTEL";
    case spv::CapabilityFPGAMemoryAccessesINTEL: return "FPGAMemoryAccessesINTEL";
    case spv::CapabilityFPGAClusterAttributesINTEL: return "FPGAClusterAttributesINTEL";
    case spv::CapabilityLoopFuseINTEL: return "LoopFuseINTEL";
    case spv::CapabilityFPGADSPControlINTEL: return "FPGADSPControlINTEL";
    case spv::CapabilityMemoryAccessAliasingINTEL: return "MemoryAccessAliasingINTEL";
    case spv::CapabilityFPGAInvocationPipeliningAttributesINTEL: return "FPGAInvocationPipeliningAttributesINTEL";
    case spv::CapabilityFPGABufferLocationINTEL: return "FPGABufferLocationINTEL";
    case spv::CapabilityArbitraryPrecisionFixedPointINTEL: return "ArbitraryPrecisionFixedPointINTEL";
    case spv::CapabilityUSMStorageClassesINTEL: return "USMStorageClassesINTEL";
    case spv::CapabilityRuntimeAlignedAttributeINTEL: return "RuntimeAlignedAttributeINTEL";
    case spv::CapabilityIOPipesINTEL: return "IOPipesINTEL";
    case spv::CapabilityBlockingPipesINTEL: return "BlockingPipesINTEL";
    case spv::CapabilityFPGARegINTEL: return "FPGARegINTEL";
    case spv::CapabilityDotProductInputAll: return "DotProductInputAll";
    case spv::CapabilityDotProductInput4x8Bit: return "DotProductInput4x8Bit";
    case spv::CapabilityDotProductInput4x8BitPacked: return "DotProductInput4x8BitPacked";
    case spv::CapabilityDotProduct: return "DotProduct";
    case spv::CapabilityRayCullMaskKHR: return "RayCullMaskKHR";
    case spv::CapabilityBitInstructions: return "BitInstructions";
    case spv::CapabilityGroupNonUniformRotateKHR: return "GroupNonUniformRotateKHR";
    case spv::CapabilityAtomicFloat32AddEXT: return "AtomicFloat32AddEXT";
    case spv::CapabilityAtomicFloat64AddEXT: return "AtomicFloat64AddEXT";
    case spv::CapabilityLongConstantCompositeINTEL: return "LongConstantCompositeINTEL";
    case spv::CapabilityOptNoneINTEL: return "OptNoneINTEL";
    case spv::CapabilityAtomicFloat16AddEXT: return "AtomicFloat16AddEXT";
    case spv::CapabilityDebugInfoModuleINTEL: return "DebugInfoModuleINTEL";
    case spv::CapabilitySplitBarrierINTEL: return "SplitBarrierINTEL";
    case spv::CapabilityFPGAArgumentInterfacesINTEL: return "FPGAArgumentInterfacesINTEL";
    case spv::CapabilityGroupUniformArithmeticKHR: return "GroupUniformArithmeticKHR";
    default: return "";
  }
}
const char* getAddressingModelName(const AddressingModel thing) {
  switch (thing) {
    case spv::AddressingModelLogical: return "Logical";
    case spv::AddressingModelPhysical32: return "Physical32";
    case spv::AddressingModelPhysical64: return "Physical64";
    case spv::AddressingModelPhysicalStorageBuffer64: return "PhysicalStorageBuffer64";
    default: return "";
  }
}
const char* getMemoryModelName(const MemoryModel thing) {
  switch (thing) {
    case spv::MemoryModelSimple: return "Simple";
    case spv::MemoryModelGLSL450: return "GLSL450";
    case spv::MemoryModelOpenCL: return "OpenCL";
    case spv::MemoryModelVulkan: return "Vulkan";
    default: return "";
  }
}
const char* getExecutionModelName(const ExecutionModel thing) {
  switch (thing) {
    case spv::ExecutionModelVertex: return "Vertex";
    case spv::ExecutionModelTessellationControl: return "TessellationControl";
    case spv::ExecutionModelTessellationEvaluation: return "TessellationEvaluation";
    case spv::ExecutionModelGeometry: return "Geometry";
    case spv::ExecutionModelFragment: return "Fragment";
    case spv::ExecutionModelGLCompute: return "GLCompute";
    case spv::ExecutionModelKernel: return "Kernel";
    case spv::ExecutionModelTaskNV: return "TaskNV";
    case spv::ExecutionModelMeshNV: return "MeshNV";
    case spv::ExecutionModelRayGenerationKHR: return "RayGenerationKHR";
    case spv::ExecutionModelIntersectionKHR: return "IntersectionKHR";
    case spv::ExecutionModelAnyHitKHR: return "AnyHitKHR";
    case spv::ExecutionModelClosestHitKHR: return "ClosestHitKHR";
    case spv::ExecutionModelMissKHR: return "MissKHR";
    case spv::ExecutionModelCallableKHR: return "CallableKHR";
    case spv::ExecutionModelTaskEXT: return "TaskEXT";
    case spv::ExecutionModelMeshEXT: return "MeshEXT";
    default: return "";
  }
}
const char* getExecutionModeName(const ExecutionMode thing) {
  switch (thing) {
    case spv::ExecutionModeInvocations: return "Invocations";
    case spv::ExecutionModeSpacingEqual: return "SpacingEqual";
    case spv::ExecutionModeSpacingFractionalEven: return "SpacingFractionalEven";
    case spv::ExecutionModeSpacingFractionalOdd: return "SpacingFractionalOdd";
    case spv::ExecutionModeVertexOrderCw: return "VertexOrderCw";
    case spv::ExecutionModeVertexOrderCcw: return "VertexOrderCcw";
    case spv::ExecutionModePixelCenterInteger: return "PixelCenterInteger";
    case spv::ExecutionModeOriginUpperLeft: return "OriginUpperLeft";
    case spv::ExecutionModeOriginLowerLeft: return "OriginLowerLeft";
    case spv::ExecutionModeEarlyFragmentTests: return "EarlyFragmentTests";
    case spv::ExecutionModePointMode: return "PointMode";
    case spv::ExecutionModeXfb: return "Xfb";
    case spv::ExecutionModeDepthReplacing: return "DepthReplacing";
    case spv::ExecutionModeDepthGreater: return "DepthGreater";
    case spv::ExecutionModeDepthLess: return "DepthLess";
    case spv::ExecutionModeDepthUnchanged: return "DepthUnchanged";
    case spv::ExecutionModeLocalSize: return "LocalSize";
    case spv::ExecutionModeLocalSizeHint: return "LocalSizeHint";
    case spv::ExecutionModeInputPoints: return "InputPoints";
    case spv::ExecutionModeInputLines: return "InputLines";
    case spv::ExecutionModeInputLinesAdjacency: return "InputLinesAdjacency";
    case spv::ExecutionModeTriangles: return "Triangles";
    case spv::ExecutionModeInputTrianglesAdjacency: return "InputTrianglesAdjacency";
    case spv::ExecutionModeQuads: return "Quads";
    case spv::ExecutionModeIsolines: return "Isolines";
    case spv::ExecutionModeOutputVertices: return "OutputVertices";
    case spv::ExecutionModeOutputPoints: return "OutputPoints";
    case spv::ExecutionModeOutputLineStrip: return "OutputLineStrip";
    case spv::ExecutionModeOutputTriangleStrip: return "OutputTriangleStrip";
    case spv::ExecutionModeVecTypeHint: return "VecTypeHint";
    case spv::ExecutionModeContractionOff: return "ContractionOff";
    case spv::ExecutionModeInitializer: return "Initializer";
    case spv::ExecutionModeFinalizer: return "Finalizer";
    case spv::ExecutionModeSubgroupSize: return "SubgroupSize";
    case spv::ExecutionModeSubgroupsPerWorkgroup: return "SubgroupsPerWorkgroup";
    case spv::ExecutionModeSubgroupsPerWorkgroupId: return "SubgroupsPerWorkgroupId";
    case spv::ExecutionModeLocalSizeId: return "LocalSizeId";
    case spv::ExecutionModeLocalSizeHintId: return "LocalSizeHintId";
    case spv::ExecutionModeSubgroupUniformControlFlowKHR: return "SubgroupUniformControlFlowKHR";
    case spv::ExecutionModePostDepthCoverage: return "PostDepthCoverage";
    case spv::ExecutionModeDenormPreserve: return "DenormPreserve";
    case spv::ExecutionModeDenormFlushToZero: return "DenormFlushToZero";
    case spv::ExecutionModeSignedZeroInfNanPreserve: return "SignedZeroInfNanPreserve";
    case spv::ExecutionModeRoundingModeRTE: return "RoundingModeRTE";
    case spv::ExecutionModeRoundingModeRTZ: return "RoundingModeRTZ";
    case spv::ExecutionModeEarlyAndLateFragmentTestsAMD: return "EarlyAndLateFragmentTestsAMD";
    case spv::ExecutionModeStencilRefReplacingEXT: return "StencilRefReplacingEXT";
    case spv::ExecutionModeStencilRefUnchangedFrontAMD: return "StencilRefUnchangedFrontAMD";
    case spv::ExecutionModeStencilRefGreaterFrontAMD: return "StencilRefGreaterFrontAMD";
    case spv::ExecutionModeStencilRefLessFrontAMD: return "StencilRefLessFrontAMD";
    case spv::ExecutionModeStencilRefUnchangedBackAMD: return "StencilRefUnchangedBackAMD";
    case spv::ExecutionModeStencilRefGreaterBackAMD: return "StencilRefGreaterBackAMD";
    case spv::ExecutionModeStencilRefLessBackAMD: return "StencilRefLessBackAMD";
    case spv::ExecutionModeOutputLinesEXT: return "OutputLinesEXT";
    case spv::ExecutionModeOutputPrimitivesEXT: return "OutputPrimitivesEXT";
    case spv::ExecutionModeDerivativeGroupQuadsNV: return "DerivativeGroupQuadsNV";
    case spv::ExecutionModeDerivativeGroupLinearNV: return "DerivativeGroupLinearNV";
    case spv::ExecutionModeOutputTrianglesEXT: return "OutputTrianglesEXT";
    case spv::ExecutionModePixelInterlockOrderedEXT: return "PixelInterlockOrderedEXT";
    case spv::ExecutionModePixelInterlockUnorderedEXT: return "PixelInterlockUnorderedEXT";
    case spv::ExecutionModeSampleInterlockOrderedEXT: return "SampleInterlockOrderedEXT";
    case spv::ExecutionModeSampleInterlockUnorderedEXT: return "SampleInterlockUnorderedEXT";
    case spv::ExecutionModeShadingRateInterlockOrderedEXT: return "ShadingRateInterlockOrderedEXT";
    case spv::ExecutionModeShadingRateInterlockUnorderedEXT: return "ShadingRateInterlockUnorderedEXT";
    case spv::ExecutionModeSharedLocalMemorySizeINTEL: return "SharedLocalMemorySizeINTEL";
    case spv::ExecutionModeRoundingModeRTPINTEL: return "RoundingModeRTPINTEL";
    case spv::ExecutionModeRoundingModeRTNINTEL: return "RoundingModeRTNINTEL";
    case spv::ExecutionModeFloatingPointModeALTINTEL: return "FloatingPointModeALTINTEL";
    case spv::ExecutionModeFloatingPointModeIEEEINTEL: return "FloatingPointModeIEEEINTEL";
    default: return "";
  }
}
const char* getFunctionControlName(const FunctionControlMask thing) {
  switch (thing) {
    case spv::FunctionControlMaskNone: return "None";
    case spv::FunctionControlInlineMask: return "Inline";
    case spv::FunctionControlDontInlineMask: return "DontInline";
    case spv::FunctionControlPureMask: return "Pure";
    case spv::FunctionControlConstMask: return "Const";
    case spv::FunctionControlOptNoneINTELMask: return "OptNoneINTEL";
    default: return "";
  }
}
const char* getStorageClassName(const StorageClass thing) {
  switch (thing) {
    case spv::StorageClassUniformConstant: return "UniformConstant";
    case spv::StorageClassInput: return "Input";
    case spv::StorageClassUniform: return "Uniform";
    case spv::StorageClassOutput: return "Output";
    case spv::StorageClassWorkgroup: return "Workgroup";
    case spv::StorageClassCrossWorkgroup: return "CrossWorkgroup";
    case spv::StorageClassPrivate: return "Private";
    case spv::StorageClassFunction: return "Function";
    case spv::StorageClassGeneric: return "Generic";
    case spv::StorageClassPushConstant: return "PushConstant";
    case spv::StorageClassAtomicCounter: return "AtomicCounter";
    case spv::StorageClassImage: return "Image";
    case spv::StorageClassStorageBuffer: return "StorageBuffer";
    case spv::StorageClassCallableDataKHR: return "CallableDataKHR";
    case spv::StorageClassIncomingCallableDataKHR: return "IncomingCallableDataKHR";
    case spv::StorageClassRayPayloadKHR: return "RayPayloadKHR";
    case spv::StorageClassHitAttributeKHR: return "HitAttributeKHR";
    case spv::StorageClassIncomingRayPayloadKHR: return "IncomingRayPayloadKHR";
    case spv::StorageClassShaderRecordBufferKHR: return "ShaderRecordBufferKHR";
    case spv::StorageClassPhysicalStorageBuffer: return "PhysicalStorageBuffer";
    case spv::StorageClassHitObjectAttributeNV: return "HitObjectAttributeNV";
    case spv::StorageClassTaskPayloadWorkgroupEXT: return "TaskPayloadWorkgroupEXT";
    case spv::StorageClassCodeSectionINTEL: return "CodeSectionINTEL";
    case spv::StorageClassDeviceOnlyINTEL: return "DeviceOnlyINTEL";
    case spv::StorageClassHostOnlyINTEL: return "HostOnlyINTEL";
    default: return "";
  }
}
const char* getDecorationName(const Decoration thing) {
  switch (thing) {
    case spv::DecorationRelaxedPrecision: return "RelaxedPrecision";
    case spv::DecorationSpecId: return "SpecId";
    case spv::DecorationBlock: return "Block";
    case spv::DecorationBufferBlock: return "BufferBlock";
    case spv::DecorationRowMajor: return "RowMajor";
    case spv::DecorationColMajor: return "ColMajor";
    case spv::DecorationArrayStride: return "ArrayStride";
    case spv::DecorationMatrixStride: return "MatrixStride";
    case spv::DecorationGLSLShared: return "GLSLShared";
    case spv::DecorationGLSLPacked: return "GLSLPacked";
    case spv::DecorationCPacked: return "CPacked";
    case spv::DecorationBuiltIn: return "BuiltIn";
    case spv::DecorationNoPerspective: return "NoPerspective";
    case spv::DecorationFlat: return "Flat";
    case spv::DecorationPatch: return "Patch";
    case spv::DecorationCentroid: return "Centroid";
    case spv::DecorationSample: return "Sample";
    case spv::DecorationInvariant: return "Invariant";
    case spv::DecorationRestrict: return "Restrict";
    case spv::DecorationAliased: return "Aliased";
    case spv::DecorationVolatile: return "Volatile";
    case spv::DecorationConstant: return "Constant";
    case spv::DecorationCoherent: return "Coherent";
    case spv::DecorationNonWritable: return "NonWritable";
    case spv::DecorationNonReadable: return "NonReadable";
    case spv::DecorationUniform: return "Uniform";
    case spv::DecorationUniformId: return "UniformId";
    case spv::DecorationSaturatedConversion: return "SaturatedConversion";
    case spv::DecorationStream: return "Stream";
    case spv::DecorationLocation: return "Location";
    case spv::DecorationComponent: return "Component";
    case spv::DecorationIndex: return "Index";
    case spv::DecorationBinding: return "Binding";
    case spv::DecorationDescriptorSet: return "DescriptorSet";
    case spv::DecorationOffset: return "Offset";
    case spv::DecorationXfbBuffer: return "XfbBuffer";
    case spv::DecorationXfbStride: return "XfbStride";
    case spv::DecorationFuncParamAttr: return "FuncParamAttr";
    case spv::DecorationFPRoundingMode: return "FPRoundingMode";
    case spv::DecorationFPFastMathMode: return "FPFastMathMode";
    case spv::DecorationLinkageAttributes: return "LinkageAttributes";
    case spv::DecorationNoContraction: return "NoContraction";
    case spv::DecorationInputAttachmentIndex: return "InputAttachmentIndex";
    case spv::DecorationAlignment: return "Alignment";
    default: return "";
  }
}
const char* getBuiltInName(const BuiltIn thing) {
  switch (thing) {
    case spv::BuiltInPosition: return "Position";
    case spv::BuiltInPointSize: return "PointSize";
    case spv::BuiltInClipDistance: return "ClipDistance";
    case spv::BuiltInCullDistance: return "CullDistance";
    case spv::BuiltInVertexId: return "VertexId";
    case spv::BuiltInInstanceId: return "InstanceId";
    case spv::BuiltInPrimitiveId: return "PrimitiveId";
    case spv::BuiltInInvocationId: return "InvocationId";
    case spv::BuiltInLayer: return "Layer";
    case spv::BuiltInViewportIndex: return "ViewportIndex";
    case spv::BuiltInTessLevelOuter: return "TessLevelOuter";
    case spv::BuiltInTessLevelInner: return "TessLevelInner";
    case spv::BuiltInTessCoord: return "TessCoord";
    case spv::BuiltInPatchVertices: return "PatchVertices";
    case spv::BuiltInFragCoord: return "FragCoord";
    case spv::BuiltInPointCoord: return "PointCoord";
    case spv::BuiltInFrontFacing: return "FrontFacing";
    case spv::BuiltInSampleId: return "SampleId";
    case spv::BuiltInSamplePosition: return "SamplePosition";
    case spv::BuiltInSampleMask: return "SampleMask";
    case spv::BuiltInFragDepth: return "FragDepth";
    case spv::BuiltInHelperInvocation: return "HelperInvocation";
    case spv::BuiltInNumWorkgroups: return "NumWorkgroups";
    case spv::BuiltInWorkgroupSize: return "WorkgroupSize";
    case spv::BuiltInWorkgroupId: return "WorkgroupId";
    case spv::BuiltInLocalInvocationId: return "LocalInvocationId";
    case spv::BuiltInGlobalInvocationId: return "GlobalInvocationId";
    case spv::BuiltInLocalInvocationIndex: return "LocalInvocationIndex";
    case spv::BuiltInWorkDim: return "WorkDim";
    case spv::BuiltInGlobalSize: return "GlobalSize";
    case spv::BuiltInEnqueuedWorkgroupSize: return "EnqueuedWorkgroupSize";
    case spv::BuiltInGlobalOffset: return "GlobalOffset";
    case spv::BuiltInGlobalLinearId: return "GlobalLinearId";
    case spv::BuiltInSubgroupSize: return "SubgroupSize";
    case spv::BuiltInSubgroupMaxSize: return "SubgroupMaxSize";
    case spv::BuiltInNumSubgroups: return "NumSubgroups";
    case spv::BuiltInNumEnqueuedSubgroups: return "NumEnqueuedSubgroups";
    case spv::BuiltInSubgroupId: return "SubgroupId";
    case spv::BuiltInSubgroupLocalInvocationId: return "SubgroupLocalInvocationId";
    case spv::BuiltInVertexIndex: return "VertexIndex";
    case spv::BuiltInInstanceIndex: return "InstanceIndex";
    case spv::BuiltInCoreIDARM: return "CoreIDARM";
    case spv::BuiltInCoreCountARM: return "CoreCountARM";
    case spv::BuiltInCoreMaxIDARM: return "CoreMaxIDARM";
    case spv::BuiltInWarpIDARM: return "WarpIDARM";
    case spv::BuiltInWarpMaxIDARM: return "WarpMaxIDARM";
    case spv::BuiltInSubgroupEqMask: return "SubgroupEqMask";
    case spv::BuiltInSubgroupGeMask: return "SubgroupGeMask";
    case spv::BuiltInSubgroupGtMask: return "SubgroupGtMask";
    case spv::BuiltInSubgroupLeMask: return "SubgroupLeMask";
    case spv::BuiltInSubgroupLtMask: return "SubgroupLtMask";
    case spv::BuiltInBaseVertex: return "BaseVertex";
    case spv::BuiltInBaseInstance: return "BaseInstance";
    case spv::BuiltInDrawIndex: return "DrawIndex";
    case spv::BuiltInPrimitiveShadingRateKHR: return "PrimitiveShadingRateKHR";
    case spv::BuiltInDeviceIndex: return "DeviceIndex";
    case spv::BuiltInViewIndex: return "ViewIndex";
    case spv::BuiltInShadingRateKHR: return "ShadingRateKHR";
    case spv::BuiltInBaryCoordNoPerspAMD: return "BaryCoordNoPerspAMD";
    case spv::BuiltInBaryCoordNoPerspCentroidAMD: return "BaryCoordNoPerspCentroidAMD";
    case spv::BuiltInBaryCoordNoPerspSampleAMD: return "BaryCoordNoPerspSampleAMD";
    case spv::BuiltInBaryCoordSmoothAMD: return "BaryCoordSmoothAMD";
    case spv::BuiltInBaryCoordSmoothCentroidAMD: return "BaryCoordSmoothCentroidAMD";
    case spv::BuiltInBaryCoordSmoothSampleAMD: return "BaryCoordSmoothSampleAMD";
    case spv::BuiltInBaryCoordPullModelAMD: return "BaryCoordPullModelAMD";
    case spv::BuiltInFragStencilRefEXT: return "FragStencilRefEXT";
    case spv::BuiltInViewportMaskNV: return "ViewportMaskNV";
    case spv::BuiltInSecondaryPositionNV: return "SecondaryPositionNV";
    case spv::BuiltInSecondaryViewportMaskNV: return "SecondaryViewportMaskNV";
    case spv::BuiltInPositionPerViewNV: return "PositionPerViewNV";
    case spv::BuiltInViewportMaskPerViewNV: return "ViewportMaskPerViewNV";
    case spv::BuiltInFullyCoveredEXT: return "FullyCoveredEXT";
    case spv::BuiltInTaskCountNV: return "TaskCountNV";
    case spv::BuiltInPrimitiveCountNV: return "PrimitiveCountNV";
    case spv::BuiltInPrimitiveIndicesNV: return "PrimitiveIndicesNV";
    case spv::BuiltInClipDistancePerViewNV: return "ClipDistancePerViewNV";
    case spv::BuiltInCullDistancePerViewNV: return "CullDistancePerViewNV";
    case spv::BuiltInLayerPerViewNV: return "LayerPerViewNV";
    case spv::BuiltInMeshViewCountNV: return "MeshViewCountNV";
    case spv::BuiltInMeshViewIndicesNV: return "MeshViewIndicesNV";
    case spv::BuiltInBaryCoordKHR: return "BaryCoordKHR";
    case spv::BuiltInBaryCoordNoPerspKHR: return "BaryCoordNoPerspKHR";
    case spv::BuiltInFragSizeEXT: return "FragSizeEXT";
    case spv::BuiltInFragInvocationCountEXT: return "FragInvocationCountEXT";
    case spv::BuiltInPrimitivePointIndicesEXT: return "PrimitivePointIndicesEXT";
    case spv::BuiltInPrimitiveLineIndicesEXT: return "PrimitiveLineIndicesEXT";
    case spv::BuiltInPrimitiveTriangleIndicesEXT: return "PrimitiveTriangleIndicesEXT";
    case spv::BuiltInCullPrimitiveEXT: return "CullPrimitiveEXT";
    case spv::BuiltInLaunchIdKHR: return "LaunchIdKHR";
    case spv::BuiltInLaunchSizeKHR: return "LaunchSizeKHR";
    case spv::BuiltInWorldRayOriginKHR: return "WorldRayOriginKHR";
    case spv::BuiltInWorldRayDirectionKHR: return "WorldRayDirectionKHR";
    case spv::BuiltInObjectRayOriginKHR: return "ObjectRayOriginKHR";
    case spv::BuiltInObjectRayDirectionKHR: return "ObjectRayDirectionKHR";
    case spv::BuiltInRayTminKHR: return "RayTminKHR";
    case spv::BuiltInRayTmaxKHR: return "RayTmaxKHR";
    case spv::BuiltInInstanceCustomIndexKHR: return "InstanceCustomIndexKHR";
    case spv::BuiltInObjectToWorldKHR: return "ObjectToWorldKHR";
    case spv::BuiltInWorldToObjectKHR: return "WorldToObjectKHR";
    case spv::BuiltInHitTNV: return "HitTNV";
    case spv::BuiltInHitKindKHR: return "HitKindKHR";
    case spv::BuiltInCurrentRayTimeNV: return "CurrentRayTimeNV";
    case spv::BuiltInIncomingRayFlagsKHR: return "IncomingRayFlagsKHR";
    case spv::BuiltInRayGeometryIndexKHR: return "RayGeometryIndexKHR";
    case spv::BuiltInWarpsPerSMNV: return "WarpsPerSMNV";
    case spv::BuiltInSMCountNV: return "SMCountNV";
    case spv::BuiltInWarpIDNV: return "WarpIDNV";
    case spv::BuiltInSMIDNV: return "SMIDNV";
    case spv::BuiltInCullMaskKHR: return "CullMaskKHR";
    default: return "";
  }
}
const char* getSelectionControlName(const SelectionControlMask thing) {
  switch (thing) {
    case spv::SelectionControlMaskNone: return "None";
    case spv::SelectionControlFlattenMask: return "Flatten";
    case spv::SelectionControlDontFlattenMask: return "DontFlatten";
    default: return "";
  }
}
const char* getLoopControlName(const LoopControlMask thing) {
  switch (thing) {
    case spv::LoopControlMaskNone: return "None";
    case spv::LoopControlUnrollMask: return "Unroll";
    case spv::LoopControlDontUnrollMask: return "DontUnroll";
    case spv::LoopControlDependencyInfiniteMask: return "DependencyInfinite";
    case spv::LoopControlDependencyLengthMask: return "DependencyLength";
    case spv::LoopControlMinIterationsMask: return "MinIterations";
    default: return "";
  }
}
const char* getDimName(const Dim thing) {
  switch (thing) {
    case spv::Dim1D: return "1D";
    case spv::Dim2D: return "2D";
    case spv::Dim3D: return "3D";
    case spv::DimCube: return "Cube";
    case spv::DimRect: return "Rect";
    case spv::DimBuffer: return "Buffer";
    case spv::DimSubpassData: return "SubpassData";
    default: return "";
  }
}
const char* getImageFormatName(const ImageFormat thing) {
  switch (thing) {
    case spv::ImageFormatUnknown: return "Unknown";
    case spv::ImageFormatRgba32f: return "Rgba32f";
    case spv::ImageFormatRgba16f: return "Rgba16f";
    case spv::ImageFormatR32f: return "R32f";
    case spv::ImageFormatRgba8: return "Rgba8";
    case spv::ImageFormatRgba8Snorm: return "Rgba8Snorm";
    case spv::ImageFormatRg32f: return "Rg32f";
    case spv::ImageFormatRg16f: return "Rg16f";
    case spv::ImageFormatR11fG11fB10f: return "R11fG11fB10f";
    case spv::ImageFormatR16f: return "R16f";
    case spv::ImageFormatRgba16: return "Rgba16";
    case spv::ImageFormatRgb10A2: return "Rgb10A2";
    case spv::ImageFormatRg16: return "Rg16";
    case spv::ImageFormatRg8: return "Rg8";
    case spv::ImageFormatR16: return "R16";
    case spv::ImageFormatR8: return "R8";
    case spv::ImageFormatRgba16Snorm: return "Rgba16Snorm";
    case spv::ImageFormatRg16Snorm: return "Rg16Snorm";
    case spv::ImageFormatRg8Snorm: return "Rg8Snorm";
    case spv::ImageFormatR16Snorm: return "R16Snorm";
    case spv::ImageFormatR8Snorm: return "R8Snorm";
    case spv::ImageFormatRgba32i: return "Rgba32i";
    case spv::ImageFormatRgba16i: return "Rgba16i";
    case spv::ImageFormatRgba8i: return "Rgba8i";
    case spv::ImageFormatR32i: return "R32i";
    case spv::ImageFormatRg32i: return "Rg32i";
    case spv::ImageFormatRg16i: return "Rg16i";
    case spv::ImageFormatRg8i: return "Rg8i";
    case spv::ImageFormatR16i: return "R16i";
    case spv::ImageFormatR8i: return "R8i";
    case spv::ImageFormatRgba32ui: return "Rgba32ui";
    case spv::ImageFormatRgba16ui: return "Rgba16ui";
    case spv::ImageFormatRgba8ui: return "Rgba8ui";
    case spv::ImageFormatR32ui: return "R32ui";
    case spv::ImageFormatRgb10a2ui: return "Rgb10a2ui";
    case spv::ImageFormatRg32ui: return "Rg32ui";
    case spv::ImageFormatRg16ui: return "Rg16ui";
    case spv::ImageFormatRg8ui: return "Rg8ui";
    case spv::ImageFormatR16ui: return "R16ui";
    case spv::ImageFormatR8ui: return "R8ui";
    case spv::ImageFormatR64ui: return "R64ui";
    case spv::ImageFormatR64i: return "R64i";
    default: return "";
  }
}
const char* getImageOperandsName(const ImageOperandsMask thing) {
  switch (thing) {
    case spv::ImageOperandsMaskNone: return "None";
    case spv::ImageOperandsBiasMask: return "Bias";
    case spv::ImageOperandsLodMask: return "Lod";
    case spv::ImageOperandsGradMask: return "Grad";
    case spv::ImageOperandsConstOffsetMask: return "ConstOffset";
    case spv::ImageOperandsOffsetMask: return "Offset";
    case spv::ImageOperandsConstOffsetsMask: return "ConstOffsets";
    case spv::ImageOperandsSampleMask: return "Sample";
    case spv::ImageOperandsMinLodMask: return "MinLod";
    case spv::ImageOperandsMakeTexelAvailableMask: return "MakeTexelAvailable";
    case spv::ImageOperandsMakeTexelVisibleMask: return "MakeTexelVisible";
    case spv::ImageOperandsNonPrivateTexelMask: return "NonPrivateTexel";
    case spv::ImageOperandsVolatileTexelMask: return "VolatileTexel";
    case spv::ImageOperandsSignExtendMask: return "SignExtend";
    case spv::ImageOperandsZeroExtendMask: return "ZeroExtend";
    case spv::ImageOperandsNontemporalMask: return "Nontemporal";
    case spv::ImageOperandsOffsetsMask: return "Offsets";
    default: return "";
  }
}
const char* getMemoryAccessName(const MemoryAccessMask thing) {
  switch (thing) {
    case spv::MemoryAccessMaskNone: return "None";
    case spv::MemoryAccessVolatileMask: return "Volatile";
    case spv::MemoryAccessAlignedMask: return "Aligned";
    case spv::MemoryAccessNontemporalMask: return "Nontemporal";
    case spv::MemoryAccessMakePointerAvailableMask: return "MakePointerAvailable";
    case spv::MemoryAccessMakePointerVisibleMask: return "MakePointerVisible";
    case spv::MemoryAccessNonPrivatePointerMask: return "NonPrivatePointer";
    case spv::MemoryAccessAliasScopeINTELMaskMask: return "AliasScopeINTELMask";
    case spv::MemoryAccessNoAliasINTELMaskMask: return "NoAliasINTELMask";
    default: return "";
  }
}
const char* getSourceLanguageName(const SourceLanguage thing) {
  switch (thing) {
    case spv::SourceLanguageUnknown: return "Unknown";
    case spv::SourceLanguageESSL: return "ESSL";
    case spv::SourceLanguageGLSL: return "GLSL";
    case spv::SourceLanguageOpenCL_C: return "OpenCL_C";
    case spv::SourceLanguageOpenCL_CPP: return "OpenCL_CPP";
    case spv::SourceLanguageHLSL: return "HLSL";
    case spv::SourceLanguageCPP_for_OpenCL: return "CPP_for_OpenCL";
    case spv::SourceLanguageSYCL: return "SYCL";
    default: return "";
  }
}
} // spv
#endif //_HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_C_STRINGS_HPP
