// Copyright 2017 The Clspv Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// THIS FILE IS AUTOGENERATED - DO NOT EDIT!
#ifndef _HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_GLSL_HPP
#define _HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_GLSL_HPP
namespace clspv {
namespace glsl {
enum ExtInst : unsigned int {
  ExtInstRound = 1,
  ExtInstRoundEven = 2,
  ExtInstTrunc = 3,
  ExtInstFAbs = 4,
  ExtInstSAbs = 5,
  ExtInstFSign = 6,
  ExtInstSSign = 7,
  ExtInstFloor = 8,
  ExtInstCeil = 9,
  ExtInstFract = 10,
  ExtInstRadians = 11,
  ExtInstDegrees = 12,
  ExtInstSin = 13,
  ExtInstCos = 14,
  ExtInstTan = 15,
  ExtInstAsin = 16,
  ExtInstAcos = 17,
  ExtInstAtan = 18,
  ExtInstSinh = 19,
  ExtInstCosh = 20,
  ExtInstTanh = 21,
  ExtInstAsinh = 22,
  ExtInstAcosh = 23,
  ExtInstAtanh = 24,
  ExtInstAtan2 = 25,
  ExtInstPow = 26,
  ExtInstExp = 27,
  ExtInstLog = 28,
  ExtInstExp2 = 29,
  ExtInstLog2 = 30,
  ExtInstSqrt = 31,
  ExtInstInverseSqrt = 32,
  ExtInstDeterminant = 33,
  ExtInstMatrixInverse = 34,
  ExtInstModf = 35,
  ExtInstModfStruct = 36,
  ExtInstFMin = 37,
  ExtInstUMin = 38,
  ExtInstSMin = 39,
  ExtInstFMax = 40,
  ExtInstUMax = 41,
  ExtInstSMax = 42,
  ExtInstFClamp = 43,
  ExtInstUClamp = 44,
  ExtInstSClamp = 45,
  ExtInstFMix = 46,
  ExtInstIMix = 47,
  ExtInstStep = 48,
  ExtInstSmoothStep = 49,
  ExtInstFma = 50,
  ExtInstFrexp = 51,
  ExtInstFrexpStruct = 52,
  ExtInstLdexp = 53,
  ExtInstPackSnorm4x8 = 54,
  ExtInstPackUnorm4x8 = 55,
  ExtInstPackSnorm2x16 = 56,
  ExtInstPackUnorm2x16 = 57,
  ExtInstPackHalf2x16 = 58,
  ExtInstPackDouble2x32 = 59,
  ExtInstUnpackSnorm2x16 = 60,
  ExtInstUnpackUnorm2x16 = 61,
  ExtInstUnpackHalf2x16 = 62,
  ExtInstUnpackSnorm4x8 = 63,
  ExtInstUnpackUnorm4x8 = 64,
  ExtInstUnpackDouble2x32 = 65,
  ExtInstLength = 66,
  ExtInstDistance = 67,
  ExtInstCross = 68,
  ExtInstNormalize = 69,
  ExtInstFaceForward = 70,
  ExtInstReflect = 71,
  ExtInstRefract = 72,
  ExtInstFindILsb = 73,
  ExtInstFindSMsb = 74,
  ExtInstFindUMsb = 75,
  ExtInstInterpolateAtCentroid = 76,
  ExtInstInterpolateAtSample = 77,
  ExtInstInterpolateAtOffset = 78,
  ExtInstNMin = 79,
  ExtInstNMax = 80,
  ExtInstNClamp = 81,
  ExtInstMax = 0x7fffffffu
}; // enum ExtInst

inline const char* getExtInstName(const ExtInst thing) {
  switch(thing) {
  case ExtInstRound: return "Round";
  case ExtInstRoundEven: return "RoundEven";
  case ExtInstTrunc: return "Trunc";
  case ExtInstFAbs: return "FAbs";
  case ExtInstSAbs: return "SAbs";
  case ExtInstFSign: return "FSign";
  case ExtInstSSign: return "SSign";
  case ExtInstFloor: return "Floor";
  case ExtInstCeil: return "Ceil";
  case ExtInstFract: return "Fract";
  case ExtInstRadians: return "Radians";
  case ExtInstDegrees: return "Degrees";
  case ExtInstSin: return "Sin";
  case ExtInstCos: return "Cos";
  case ExtInstTan: return "Tan";
  case ExtInstAsin: return "Asin";
  case ExtInstAcos: return "Acos";
  case ExtInstAtan: return "Atan";
  case ExtInstSinh: return "Sinh";
  case ExtInstCosh: return "Cosh";
  case ExtInstTanh: return "Tanh";
  case ExtInstAsinh: return "Asinh";
  case ExtInstAcosh: return "Acosh";
  case ExtInstAtanh: return "Atanh";
  case ExtInstAtan2: return "Atan2";
  case ExtInstPow: return "Pow";
  case ExtInstExp: return "Exp";
  case ExtInstLog: return "Log";
  case ExtInstExp2: return "Exp2";
  case ExtInstLog2: return "Log2";
  case ExtInstSqrt: return "Sqrt";
  case ExtInstInverseSqrt: return "InverseSqrt";
  case ExtInstDeterminant: return "Determinant";
  case ExtInstMatrixInverse: return "MatrixInverse";
  case ExtInstModf: return "Modf";
  case ExtInstModfStruct: return "ModfStruct";
  case ExtInstFMin: return "FMin";
  case ExtInstUMin: return "UMin";
  case ExtInstSMin: return "SMin";
  case ExtInstFMax: return "FMax";
  case ExtInstUMax: return "UMax";
  case ExtInstSMax: return "SMax";
  case ExtInstFClamp: return "FClamp";
  case ExtInstUClamp: return "UClamp";
  case ExtInstSClamp: return "SClamp";
  case ExtInstFMix: return "FMix";
  case ExtInstIMix: return "IMix";
  case ExtInstStep: return "Step";
  case ExtInstSmoothStep: return "SmoothStep";
  case ExtInstFma: return "Fma";
  case ExtInstFrexp: return "Frexp";
  case ExtInstFrexpStruct: return "FrexpStruct";
  case ExtInstLdexp: return "Ldexp";
  case ExtInstPackSnorm4x8: return "PackSnorm4x8";
  case ExtInstPackUnorm4x8: return "PackUnorm4x8";
  case ExtInstPackSnorm2x16: return "PackSnorm2x16";
  case ExtInstPackUnorm2x16: return "PackUnorm2x16";
  case ExtInstPackHalf2x16: return "PackHalf2x16";
  case ExtInstPackDouble2x32: return "PackDouble2x32";
  case ExtInstUnpackSnorm2x16: return "UnpackSnorm2x16";
  case ExtInstUnpackUnorm2x16: return "UnpackUnorm2x16";
  case ExtInstUnpackHalf2x16: return "UnpackHalf2x16";
  case ExtInstUnpackSnorm4x8: return "UnpackSnorm4x8";
  case ExtInstUnpackUnorm4x8: return "UnpackUnorm4x8";
  case ExtInstUnpackDouble2x32: return "UnpackDouble2x32";
  case ExtInstLength: return "Length";
  case ExtInstDistance: return "Distance";
  case ExtInstCross: return "Cross";
  case ExtInstNormalize: return "Normalize";
  case ExtInstFaceForward: return "FaceForward";
  case ExtInstReflect: return "Reflect";
  case ExtInstRefract: return "Refract";
  case ExtInstFindILsb: return "FindILsb";
  case ExtInstFindSMsb: return "FindSMsb";
  case ExtInstFindUMsb: return "FindUMsb";
  case ExtInstInterpolateAtCentroid: return "InterpolateAtCentroid";
  case ExtInstInterpolateAtSample: return "InterpolateAtSample";
  case ExtInstInterpolateAtOffset: return "InterpolateAtOffset";
  case ExtInstNMin: return "NMin";
  case ExtInstNMax: return "NMax";
  case ExtInstNClamp: return "NClamp";
  default: return "";
};
}
} // namespace glsl
} // namespace clspv
#endif//_HOME_TOM_CLSPV_BUILD_INCLUDE_CLSPV_SPIRV_GLSL_HPP

