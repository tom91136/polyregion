/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class polyregion_jvm_runtime_Runtime */

#ifndef _Included_polyregion_jvm_runtime_Runtime
#define _Included_polyregion_jvm_runtime_Runtime
#ifdef __cplusplus
extern "C" {
#endif
#undef polyregion_jvm_runtime_Runtime_TYPE_1VOID
#define polyregion_jvm_runtime_Runtime_TYPE_1VOID 1L
#undef polyregion_jvm_runtime_Runtime_TYPE_1BOOL
#define polyregion_jvm_runtime_Runtime_TYPE_1BOOL 2L
#undef polyregion_jvm_runtime_Runtime_TYPE_1BYTE
#define polyregion_jvm_runtime_Runtime_TYPE_1BYTE 3L
#undef polyregion_jvm_runtime_Runtime_TYPE_1CHAR
#define polyregion_jvm_runtime_Runtime_TYPE_1CHAR 4L
#undef polyregion_jvm_runtime_Runtime_TYPE_1SHORT
#define polyregion_jvm_runtime_Runtime_TYPE_1SHORT 5L
#undef polyregion_jvm_runtime_Runtime_TYPE_1INT
#define polyregion_jvm_runtime_Runtime_TYPE_1INT 6L
#undef polyregion_jvm_runtime_Runtime_TYPE_1LONG
#define polyregion_jvm_runtime_Runtime_TYPE_1LONG 7L
#undef polyregion_jvm_runtime_Runtime_TYPE_1FLOAT
#define polyregion_jvm_runtime_Runtime_TYPE_1FLOAT 8L
#undef polyregion_jvm_runtime_Runtime_TYPE_1DOUBLE
#define polyregion_jvm_runtime_Runtime_TYPE_1DOUBLE 9L
#undef polyregion_jvm_runtime_Runtime_TYPE_1PTR
#define polyregion_jvm_runtime_Runtime_TYPE_1PTR 10L
#undef polyregion_jvm_runtime_Runtime_ACCESS_1RW
#define polyregion_jvm_runtime_Runtime_ACCESS_1RW 1L
#undef polyregion_jvm_runtime_Runtime_ACCESS_1R0
#define polyregion_jvm_runtime_Runtime_ACCESS_1R0 2L
#undef polyregion_jvm_runtime_Runtime_ACCESS_1WO
#define polyregion_jvm_runtime_Runtime_ACCESS_1WO 3L
/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     pointers
 * Signature:  ([Ljava/nio/Buffer;)[J
 */
JNIEXPORT jlongArray JNICALL Java_polyregion_jvm_runtime_Runtime_pointers
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     CUDA0
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_CUDA0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     HIP0
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_HIP0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     OpenCL0
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_OpenCL0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     Relocatable0
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_Relocatable0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     Dynamic0
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_Dynamic0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     runtimeProperties0
 * Signature:  (J)[Lpolyregion/jvm/runtime/Property;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtime_runtimeProperties0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     devices0
 * Signature:  (J)[Lpolyregion/jvm/runtime/Device;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtime_devices0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     deviceProperties0
 * Signature:  (J)[Lpolyregion/jvm/runtime/Property;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtime_deviceProperties0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     loadModule0
 * Signature:  (JLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_loadModule0
  (JNIEnv *, jclass, jlong, jstring, jbyteArray);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     moduleLoaded0
 * Signature:  (JLjava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_polyregion_jvm_runtime_Runtime_moduleLoaded0
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     malloc0
 * Signature:  (JJB)J
 */
JNIEXPORT jlong JNICALL Java_polyregion_jvm_runtime_Runtime_malloc0
  (JNIEnv *, jclass, jlong, jlong, jbyte);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     free0
 * Signature:  (JJ)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_free0
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     createQueue0
 * Signature:  (JLpolyregion/jvm/runtime/Device;)Lpolyregion/jvm/runtime/Device$Queue;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtime_createQueue0
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     enqueueHostToDeviceAsync0
 * Signature:  (JLjava/nio/ByteBuffer;JILjava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_enqueueHostToDeviceAsync0
  (JNIEnv *, jclass, jlong, jobject, jlong, jint, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     enqueueDeviceToHostAsync0
 * Signature:  (JJLjava/nio/ByteBuffer;ILjava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_enqueueDeviceToHostAsync0
  (JNIEnv *, jclass, jlong, jlong, jobject, jint, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     enqueueInvokeAsync0
 * Signature:  (JLjava/lang/String;Ljava/lang/String;[B[BLpolyregion/jvm/runtime/Policy;Ljava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_enqueueInvokeAsync0
  (JNIEnv *, jclass, jlong, jstring, jstring, jbyteArray, jbyteArray, jobject, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     deleteAllPeer0
 * Signature:  ()V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_deleteAllPeer0
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     deleteDevicePeer0
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_deleteDevicePeer0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     deleteQueuePeer0
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_deleteQueuePeer0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtime
 * Method:     deleteRuntimePeer0
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtime_deleteRuntimePeer0
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
