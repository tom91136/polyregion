/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class polyregion_jvm_runtime_Runtimes */

#ifndef _Included_polyregion_jvm_runtime_Runtimes
#define _Included_polyregion_jvm_runtime_Runtimes
#ifdef __cplusplus
extern "C" {
#endif
#undef polyregion_jvm_runtime_Runtimes_TYPE_1VOID
#define polyregion_jvm_runtime_Runtimes_TYPE_1VOID 1L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1BOOL
#define polyregion_jvm_runtime_Runtimes_TYPE_1BOOL 2L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1BYTE
#define polyregion_jvm_runtime_Runtimes_TYPE_1BYTE 3L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1CHAR
#define polyregion_jvm_runtime_Runtimes_TYPE_1CHAR 4L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1SHORT
#define polyregion_jvm_runtime_Runtimes_TYPE_1SHORT 5L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1INT
#define polyregion_jvm_runtime_Runtimes_TYPE_1INT 6L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1LONG
#define polyregion_jvm_runtime_Runtimes_TYPE_1LONG 7L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1FLOAT
#define polyregion_jvm_runtime_Runtimes_TYPE_1FLOAT 8L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1DOUBLE
#define polyregion_jvm_runtime_Runtimes_TYPE_1DOUBLE 9L
#undef polyregion_jvm_runtime_Runtimes_TYPE_1PTR
#define polyregion_jvm_runtime_Runtimes_TYPE_1PTR 10L
#undef polyregion_jvm_runtime_Runtimes_ACCESS_1RW
#define polyregion_jvm_runtime_Runtimes_ACCESS_1RW 1L
#undef polyregion_jvm_runtime_Runtimes_ACCESS_1R0
#define polyregion_jvm_runtime_Runtimes_ACCESS_1R0 2L
#undef polyregion_jvm_runtime_Runtimes_ACCESS_1WO
#define polyregion_jvm_runtime_Runtimes_ACCESS_1WO 3L
/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     CUDA
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_CUDA
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     HIP
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_HIP
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     OpenCL
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_OpenCL
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     Relocatable
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_Relocatable
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     Dynamic
 * Signature:  ()Lpolyregion/jvm/runtime/Runtime;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_Dynamic
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     deleteAllPeer
 * Signature:  ()V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_deleteAllPeer
  (JNIEnv *, jclass);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     deleteDevicePeer
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_deleteDevicePeer
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     deleteQueuePeer
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_deleteQueuePeer
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     deleteRuntimePeer
 * Signature:  (J)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_deleteRuntimePeer
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     runtimeProperties
 * Signature:  (J)[Lpolyregion/jvm/runtime/Property;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtimes_runtimeProperties
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     devices0
 * Signature:  (J)[Lpolyregion/jvm/runtime/Device;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtimes_devices0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     deviceProperties
 * Signature:  (J)[Lpolyregion/jvm/runtime/Property;
 */
JNIEXPORT jobjectArray JNICALL Java_polyregion_jvm_runtime_Runtimes_deviceProperties
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     loadModule0
 * Signature:  (JLjava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_loadModule0
  (JNIEnv *, jclass, jlong, jstring, jbyteArray);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     malloc0
 * Signature:  (JJB)J
 */
JNIEXPORT jlong JNICALL Java_polyregion_jvm_runtime_Runtimes_malloc0
  (JNIEnv *, jclass, jlong, jlong, jbyte);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     free0
 * Signature:  (JJ)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_free0
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     createQueue0
 * Signature:  (J)Lpolyregion/jvm/runtime/Device$Queue;
 */
JNIEXPORT jobject JNICALL Java_polyregion_jvm_runtime_Runtimes_createQueue0
  (JNIEnv *, jclass, jlong);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     enqueueHostToDeviceAsync0
 * Signature:  (JLjava/nio/ByteBuffer;JILjava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_enqueueHostToDeviceAsync0
  (JNIEnv *, jclass, jlong, jobject, jlong, jint, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     enqueueDeviceToHostAsync0
 * Signature:  (JJLjava/nio/ByteBuffer;ILjava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_enqueueDeviceToHostAsync0
  (JNIEnv *, jclass, jlong, jlong, jobject, jint, jobject);

/*
 * Class:      polyregion_jvm_runtime_Runtimes
 * Method:     enqueueInvokeAsync0
 * Signature:  (JLjava/lang/String;Ljava/lang/String;[B[BLpolyregion/jvm/runtime/Policy;Ljava/lang/Runnable;)V
 */
JNIEXPORT void JNICALL Java_polyregion_jvm_runtime_Runtimes_enqueueInvokeAsync0
  (JNIEnv *, jclass, jlong, jstring, jstring, jbyteArray, jbyteArray, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
