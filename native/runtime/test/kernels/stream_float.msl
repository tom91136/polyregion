kernel void stream_copy_float(device float *a [[ buffer(0) ]],
                              device float *b [[ buffer(1) ]],
                              device float *c [[ buffer(2) ]],
                              uint32_t i [[ thread_position_in_grid ]]) {
    c[i] = a[i];
}

kernel void stream_mul_float(device float *a [[ buffer(0) ]],
                             device float *b [[ buffer(1) ]],
                             device float *c [[ buffer(2) ]],
                             device float &scalar [[ buffer(3) ]],
                             uint32_t i [[ thread_position_in_grid ]]) {
    b[i] = scalar * c[i];
}

kernel void stream_add_float(device float *a [[ buffer(0) ]],
                             device float *b [[ buffer(1) ]],
                             device float *c [[ buffer(2) ]],
                             uint32_t i [[ thread_position_in_grid ]]) {
    c[i] = a[i] + b[i];
}

kernel void stream_triad_float(device float *a [[ buffer(0) ]],
                               device float *b [[ buffer(1) ]],
                               device float *c [[ buffer(2) ]],
                               device float &scalar [[ buffer(3) ]],
                               uint32_t i [[ thread_position_in_grid ]]) {
    a[i] = b[i] + scalar * c[i];
}

// See Metal Shading Language Specification Table 5.7
kernel void stream_dot_float(device float *a [[ buffer(0) ]],
                             device float *b [[ buffer(1) ]],
                             device float *c [[ buffer(2) ]],
                             device float *sum [[ buffer(3) ]],
                             threadgroup float *wg_sum [[ threadgroup(4) ]],
                             device uint32_t &array_size [[ buffer(5) ]],
                             uint32_t i           [[ thread_position_in_grid        ]], // global id
                             uint32_t local_i     [[ thread_position_in_threadgroup ]], // local id
                             uint32_t local_size  [[ threads_per_threadgroup        ]], // local size
                             uint32_t global_size [[ threads_per_grid               ]], // global size
                             uint32_t group_id    [[ threadgroup_position_in_grid   ]]  // group id
                             ) {
    wg_sum[local_i] = 0;
    for (; i < array_size; i += global_size) {
        wg_sum[local_i] += a[i] * b[i];
    }
    for (uint32_t offset = local_size / 2; offset > 0; offset /= 2) {
        threadgroup_barrier(metal::mem_flags::mem_threadgroup);
        if (local_i < offset) {
            wg_sum[local_i] += wg_sum[local_i + offset];
        }
    }
    if (local_i == 0) sum[group_id] = wg_sum[local_i];
}
