#pragma once

// This file is autogenerated with the following input:
// /opt/rocm/hsa/include/hsa/hsa_ext_amd.h
// using make_ew.py at 2022-06-12 02:05:05.021325

#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>   
#endif

#ifdef __cplusplus
extern "C" {
#endif
    
typedef enum {
  HSAEW_SUCCESS = 0,
  HSAEW_ALREADY_OPENED = 1,
  HSAEW_OPEN_FAILED= 1,
} hsaew_status_t;

void hsaew_close(void);

hsaew_status_t hsaew_open(const char* path);

typedef enum 
{
  HSA_STATUS_SUCCESS = 0x0,
  HSA_STATUS_INFO_BREAK = 0x1,
  HSA_STATUS_ERROR = 0x1000,
  HSA_STATUS_ERROR_INVALID_ARGUMENT = 0x1001,
  HSA_STATUS_ERROR_INVALID_QUEUE_CREATION = 0x1002,
  HSA_STATUS_ERROR_INVALID_ALLOCATION = 0x1003,
  HSA_STATUS_ERROR_INVALID_AGENT = 0x1004,
  HSA_STATUS_ERROR_INVALID_REGION = 0x1005,
  HSA_STATUS_ERROR_INVALID_SIGNAL = 0x1006,
  HSA_STATUS_ERROR_INVALID_QUEUE = 0x1007,
  HSA_STATUS_ERROR_OUT_OF_RESOURCES = 0x1008,
  HSA_STATUS_ERROR_INVALID_PACKET_FORMAT = 0x1009,
  HSA_STATUS_ERROR_RESOURCE_FREE = 0x100A,
  HSA_STATUS_ERROR_NOT_INITIALIZED = 0x100B,
  HSA_STATUS_ERROR_REFCOUNT_OVERFLOW = 0x100C,
  HSA_STATUS_ERROR_INCOMPATIBLE_ARGUMENTS = 0x100D,
  HSA_STATUS_ERROR_INVALID_INDEX = 0x100E,
  HSA_STATUS_ERROR_INVALID_ISA = 0x100F,
  HSA_STATUS_ERROR_INVALID_ISA_NAME = 0x1017,
  HSA_STATUS_ERROR_INVALID_CODE_OBJECT = 0x1010,
  HSA_STATUS_ERROR_INVALID_EXECUTABLE = 0x1011,
  HSA_STATUS_ERROR_FROZEN_EXECUTABLE = 0x1012,
  HSA_STATUS_ERROR_INVALID_SYMBOL_NAME = 0x1013,
  HSA_STATUS_ERROR_VARIABLE_ALREADY_DEFINED = 0x1014,
  HSA_STATUS_ERROR_VARIABLE_UNDEFINED = 0x1015,
  HSA_STATUS_ERROR_EXCEPTION = 0x1016,
  HSA_STATUS_ERROR_INVALID_CODE_SYMBOL = 0x1018,
  HSA_STATUS_ERROR_INVALID_EXECUTABLE_SYMBOL = 0x1019,
  HSA_STATUS_ERROR_INVALID_FILE = 0x1020,
  HSA_STATUS_ERROR_INVALID_CODE_OBJECT_READER = 0x1021,
  HSA_STATUS_ERROR_INVALID_CACHE = 0x1022,
  HSA_STATUS_ERROR_INVALID_WAVEFRONT = 0x1023,
  HSA_STATUS_ERROR_INVALID_SIGNAL_GROUP = 0x1024,
  HSA_STATUS_ERROR_INVALID_RUNTIME_STATE = 0x1025,
  HSA_STATUS_ERROR_FATAL = 0x1026
} hsa_status_t;
typedef hsa_status_t hsaew_hsa_status_string(hsa_status_t status, const char **status_string);
typedef struct hsa_dim3_s
{
  uint32_t x;
  uint32_t y;
  uint32_t z;
} hsa_dim3_t;
typedef enum 
{
  HSA_ACCESS_PERMISSION_RO = 1,
  HSA_ACCESS_PERMISSION_WO = 2,
  HSA_ACCESS_PERMISSION_RW = 3
} hsa_access_permission_t;
typedef int hsa_file_t;
typedef hsa_status_t hsaew_hsa_init();
typedef hsa_status_t hsaew_hsa_shut_down();
typedef enum 
{
  HSA_ENDIANNESS_LITTLE = 0,
  HSA_ENDIANNESS_BIG = 1
} hsa_endianness_t;
typedef enum 
{
  HSA_MACHINE_MODEL_SMALL = 0,
  HSA_MACHINE_MODEL_LARGE = 1
} hsa_machine_model_t;
typedef enum 
{
  HSA_PROFILE_BASE = 0,
  HSA_PROFILE_FULL = 1
} hsa_profile_t;
typedef enum 
{
  HSA_SYSTEM_INFO_VERSION_MAJOR = 0,
  HSA_SYSTEM_INFO_VERSION_MINOR = 1,
  HSA_SYSTEM_INFO_TIMESTAMP = 2,
  HSA_SYSTEM_INFO_TIMESTAMP_FREQUENCY = 3,
  HSA_SYSTEM_INFO_SIGNAL_MAX_WAIT = 4,
  HSA_SYSTEM_INFO_ENDIANNESS = 5,
  HSA_SYSTEM_INFO_MACHINE_MODEL = 6,
  HSA_SYSTEM_INFO_EXTENSIONS = 7,
  HSA_AMD_SYSTEM_INFO_BUILD_VERSION = 0x200,
  HSA_AMD_SYSTEM_INFO_SVM_SUPPORTED = 0x201,
  HSA_AMD_SYSTEM_INFO_SVM_ACCESSIBLE_BY_DEFAULT = 0x202
} hsa_system_info_t;
typedef hsa_status_t hsaew_hsa_system_get_info(hsa_system_info_t attribute, void *value);
typedef enum 
{
  HSA_EXTENSION_FINALIZER = 0,
  HSA_EXTENSION_IMAGES = 1,
  HSA_EXTENSION_PERFORMANCE_COUNTERS = 2,
  HSA_EXTENSION_PROFILING_EVENTS = 3,
  HSA_EXTENSION_STD_LAST = 3,
  HSA_AMD_FIRST_EXTENSION = 0x200,
  HSA_EXTENSION_AMD_PROFILER = 0x200,
  HSA_EXTENSION_AMD_LOADER = 0x201,
  HSA_EXTENSION_AMD_AQLPROFILE = 0x202,
  HSA_AMD_LAST_EXTENSION = 0x202
} hsa_extension_t;
typedef hsa_status_t hsaew_hsa_extension_get_name(uint16_t extension, const char **name);
typedef hsa_status_t hsaew_hsa_system_extension_supported(uint16_t extension, uint16_t version_major, uint16_t version_minor, bool *result);
typedef hsa_status_t hsaew_hsa_system_major_extension_supported(uint16_t extension, uint16_t version_major, uint16_t *version_minor, bool *result);
typedef hsa_status_t hsaew_hsa_system_get_extension_table(uint16_t extension, uint16_t version_major, uint16_t version_minor, void *table);
typedef hsa_status_t hsaew_hsa_system_get_major_extension_table(uint16_t extension, uint16_t version_major, size_t table_length, void *table);
typedef struct hsa_agent_s
{
  uint64_t handle;
} hsa_agent_t;
typedef enum 
{
  HSA_AGENT_FEATURE_KERNEL_DISPATCH = 1,
  HSA_AGENT_FEATURE_AGENT_DISPATCH = 2
} hsa_agent_feature_t;
typedef enum 
{
  HSA_DEVICE_TYPE_CPU = 0,
  HSA_DEVICE_TYPE_GPU = 1,
  HSA_DEVICE_TYPE_DSP = 2
} hsa_device_type_t;
typedef enum 
{
  HSA_DEFAULT_FLOAT_ROUNDING_MODE_DEFAULT = 0,
  HSA_DEFAULT_FLOAT_ROUNDING_MODE_ZERO = 1,
  HSA_DEFAULT_FLOAT_ROUNDING_MODE_NEAR = 2
} hsa_default_float_rounding_mode_t;
typedef enum 
{
  HSA_AGENT_INFO_NAME = 0,
  HSA_AGENT_INFO_VENDOR_NAME = 1,
  HSA_AGENT_INFO_FEATURE = 2,
  HSA_AGENT_INFO_MACHINE_MODEL = 3,
  HSA_AGENT_INFO_PROFILE = 4,
  HSA_AGENT_INFO_DEFAULT_FLOAT_ROUNDING_MODE = 5,
  HSA_AGENT_INFO_BASE_PROFILE_DEFAULT_FLOAT_ROUNDING_MODES = 23,
  HSA_AGENT_INFO_FAST_F16_OPERATION = 24,
  HSA_AGENT_INFO_WAVEFRONT_SIZE = 6,
  HSA_AGENT_INFO_WORKGROUP_MAX_DIM = 7,
  HSA_AGENT_INFO_WORKGROUP_MAX_SIZE = 8,
  HSA_AGENT_INFO_GRID_MAX_DIM = 9,
  HSA_AGENT_INFO_GRID_MAX_SIZE = 10,
  HSA_AGENT_INFO_FBARRIER_MAX_SIZE = 11,
  HSA_AGENT_INFO_QUEUES_MAX = 12,
  HSA_AGENT_INFO_QUEUE_MIN_SIZE = 13,
  HSA_AGENT_INFO_QUEUE_MAX_SIZE = 14,
  HSA_AGENT_INFO_QUEUE_TYPE = 15,
  HSA_AGENT_INFO_NODE = 16,
  HSA_AGENT_INFO_DEVICE = 17,
  HSA_AGENT_INFO_CACHE_SIZE = 18,
  HSA_AGENT_INFO_ISA = 19,
  HSA_AGENT_INFO_EXTENSIONS = 20,
  HSA_AGENT_INFO_VERSION_MAJOR = 21,
  HSA_AGENT_INFO_VERSION_MINOR = 22
} hsa_agent_info_t;
typedef hsa_status_t hsaew_hsa_agent_get_info(hsa_agent_t agent, hsa_agent_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_iterate_agents(hsa_status_t (*callback)(hsa_agent_t agent, void *data), void *data);
typedef enum 
{
  HSA_EXCEPTION_POLICY_BREAK = 1,
  HSA_EXCEPTION_POLICY_DETECT = 2
} hsa_exception_policy_t;
typedef hsa_status_t hsaew_hsa_agent_get_exception_policies(hsa_agent_t agent, hsa_profile_t profile, uint16_t *mask);
typedef struct hsa_cache_s
{
  uint64_t handle;
} hsa_cache_t;
typedef enum 
{
  HSA_CACHE_INFO_NAME_LENGTH = 0,
  HSA_CACHE_INFO_NAME = 1,
  HSA_CACHE_INFO_LEVEL = 2,
  HSA_CACHE_INFO_SIZE = 3
} hsa_cache_info_t;
typedef hsa_status_t hsaew_hsa_cache_get_info(hsa_cache_t cache, hsa_cache_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_agent_iterate_caches(hsa_agent_t agent, hsa_status_t (*callback)(hsa_cache_t cache, void *data), void *data);
typedef hsa_status_t hsaew_hsa_agent_extension_supported(uint16_t extension, hsa_agent_t agent, uint16_t version_major, uint16_t version_minor, bool *result);
typedef hsa_status_t hsaew_hsa_agent_major_extension_supported(uint16_t extension, hsa_agent_t agent, uint16_t version_major, uint16_t *version_minor, bool *result);
typedef struct hsa_signal_s
{
  uint64_t handle;
} hsa_signal_t;
typedef int64_t hsa_signal_value_t;
typedef hsa_status_t hsaew_hsa_signal_create(hsa_signal_value_t initial_value, uint32_t num_consumers, const hsa_agent_t *consumers, hsa_signal_t *signal);
typedef hsa_status_t hsaew_hsa_signal_destroy(hsa_signal_t signal);
typedef hsa_signal_value_t hsaew_hsa_signal_load_scacquire(hsa_signal_t signal);
typedef hsa_signal_value_t hsaew_hsa_signal_load_relaxed(hsa_signal_t signal);
typedef hsa_signal_value_t hsaew_hsa_signal_load_acquire(hsa_signal_t signal);
typedef void hsaew_hsa_signal_store_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_store_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_store_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_silent_store_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_silent_store_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_exchange_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_scacq_screl(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_acq_rel(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_scacquire(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_acquire(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_relaxed(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_screlease(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef hsa_signal_value_t hsaew_hsa_signal_cas_release(hsa_signal_t signal, hsa_signal_value_t expected, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_add_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_subtract_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_and_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_or_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_scacq_screl(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_acq_rel(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_scacquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_acquire(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_relaxed(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_screlease(hsa_signal_t signal, hsa_signal_value_t value);
typedef void hsaew_hsa_signal_xor_release(hsa_signal_t signal, hsa_signal_value_t value);
typedef enum 
{
  HSA_SIGNAL_CONDITION_EQ = 0,
  HSA_SIGNAL_CONDITION_NE = 1,
  HSA_SIGNAL_CONDITION_LT = 2,
  HSA_SIGNAL_CONDITION_GTE = 3
} hsa_signal_condition_t;
typedef enum 
{
  HSA_WAIT_STATE_BLOCKED = 0,
  HSA_WAIT_STATE_ACTIVE = 1
} hsa_wait_state_t;
typedef hsa_signal_value_t hsaew_hsa_signal_wait_scacquire(hsa_signal_t signal, hsa_signal_condition_t condition, hsa_signal_value_t compare_value, uint64_t timeout_hint, hsa_wait_state_t wait_state_hint);
typedef hsa_signal_value_t hsaew_hsa_signal_wait_relaxed(hsa_signal_t signal, hsa_signal_condition_t condition, hsa_signal_value_t compare_value, uint64_t timeout_hint, hsa_wait_state_t wait_state_hint);
typedef hsa_signal_value_t hsaew_hsa_signal_wait_acquire(hsa_signal_t signal, hsa_signal_condition_t condition, hsa_signal_value_t compare_value, uint64_t timeout_hint, hsa_wait_state_t wait_state_hint);
typedef struct hsa_signal_group_s
{
  uint64_t handle;
} hsa_signal_group_t;
typedef hsa_status_t hsaew_hsa_signal_group_create(uint32_t num_signals, const hsa_signal_t *signals, uint32_t num_consumers, const hsa_agent_t *consumers, hsa_signal_group_t *signal_group);
typedef hsa_status_t hsaew_hsa_signal_group_destroy(hsa_signal_group_t signal_group);
typedef hsa_status_t hsaew_hsa_signal_group_wait_any_scacquire(hsa_signal_group_t signal_group, const hsa_signal_condition_t *conditions, const hsa_signal_value_t *compare_values, hsa_wait_state_t wait_state_hint, hsa_signal_t *signal, hsa_signal_value_t *value);
typedef hsa_status_t hsaew_hsa_signal_group_wait_any_relaxed(hsa_signal_group_t signal_group, const hsa_signal_condition_t *conditions, const hsa_signal_value_t *compare_values, hsa_wait_state_t wait_state_hint, hsa_signal_t *signal, hsa_signal_value_t *value);
typedef struct hsa_region_s
{
  uint64_t handle;
} hsa_region_t;
typedef enum 
{
  HSA_QUEUE_TYPE_MULTI = 0,
  HSA_QUEUE_TYPE_SINGLE = 1,
  HSA_QUEUE_TYPE_COOPERATIVE = 2
} hsa_queue_type_t;
typedef uint32_t hsa_queue_type32_t;
typedef enum 
{
  HSA_QUEUE_FEATURE_KERNEL_DISPATCH = 1,
  HSA_QUEUE_FEATURE_AGENT_DISPATCH = 2
} hsa_queue_feature_t;
typedef struct hsa_queue_s
{
  hsa_queue_type32_t type;
  uint32_t features;
  void *base_address;
  hsa_signal_t doorbell_signal;
  uint32_t size;
  uint32_t reserved1;
  uint64_t id;
} hsa_queue_t;
typedef hsa_status_t hsaew_hsa_queue_create(hsa_agent_t agent, uint32_t size, hsa_queue_type32_t type, void (*callback)(hsa_status_t status, hsa_queue_t *source, void *data), void *data, uint32_t private_segment_size, uint32_t group_segment_size, hsa_queue_t **queue);
typedef hsa_status_t hsaew_hsa_soft_queue_create(hsa_region_t region, uint32_t size, hsa_queue_type32_t type, uint32_t features, hsa_signal_t doorbell_signal, hsa_queue_t **queue);
typedef hsa_status_t hsaew_hsa_queue_destroy(hsa_queue_t *queue);
typedef hsa_status_t hsaew_hsa_queue_inactivate(hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_read_index_acquire(const hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_read_index_scacquire(const hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_read_index_relaxed(const hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_write_index_acquire(const hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_write_index_scacquire(const hsa_queue_t *queue);
typedef uint64_t hsaew_hsa_queue_load_write_index_relaxed(const hsa_queue_t *queue);
typedef void hsaew_hsa_queue_store_write_index_relaxed(const hsa_queue_t *queue, uint64_t value);
typedef void hsaew_hsa_queue_store_write_index_release(const hsa_queue_t *queue, uint64_t value);
typedef void hsaew_hsa_queue_store_write_index_screlease(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_acq_rel(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_scacq_screl(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_acquire(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_scacquire(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_relaxed(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_release(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_cas_write_index_screlease(const hsa_queue_t *queue, uint64_t expected, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_acq_rel(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_scacq_screl(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_acquire(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_scacquire(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_relaxed(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_release(const hsa_queue_t *queue, uint64_t value);
typedef uint64_t hsaew_hsa_queue_add_write_index_screlease(const hsa_queue_t *queue, uint64_t value);
typedef void hsaew_hsa_queue_store_read_index_relaxed(const hsa_queue_t *queue, uint64_t value);
typedef void hsaew_hsa_queue_store_read_index_release(const hsa_queue_t *queue, uint64_t value);
typedef void hsaew_hsa_queue_store_read_index_screlease(const hsa_queue_t *queue, uint64_t value);
typedef enum 
{
  HSA_PACKET_TYPE_VENDOR_SPECIFIC = 0,
  HSA_PACKET_TYPE_INVALID = 1,
  HSA_PACKET_TYPE_KERNEL_DISPATCH = 2,
  HSA_PACKET_TYPE_BARRIER_AND = 3,
  HSA_PACKET_TYPE_AGENT_DISPATCH = 4,
  HSA_PACKET_TYPE_BARRIER_OR = 5
} hsa_packet_type_t;
typedef enum 
{
  HSA_FENCE_SCOPE_NONE = 0,
  HSA_FENCE_SCOPE_AGENT = 1,
  HSA_FENCE_SCOPE_SYSTEM = 2
} hsa_fence_scope_t;
typedef enum 
{
  HSA_PACKET_HEADER_TYPE = 0,
  HSA_PACKET_HEADER_BARRIER = 8,
  HSA_PACKET_HEADER_SCACQUIRE_FENCE_SCOPE = 9,
  HSA_PACKET_HEADER_ACQUIRE_FENCE_SCOPE = 9,
  HSA_PACKET_HEADER_SCRELEASE_FENCE_SCOPE = 11,
  HSA_PACKET_HEADER_RELEASE_FENCE_SCOPE = 11
} hsa_packet_header_t;
typedef enum 
{
  HSA_PACKET_HEADER_WIDTH_TYPE = 8,
  HSA_PACKET_HEADER_WIDTH_BARRIER = 1,
  HSA_PACKET_HEADER_WIDTH_SCACQUIRE_FENCE_SCOPE = 2,
  HSA_PACKET_HEADER_WIDTH_ACQUIRE_FENCE_SCOPE = 2,
  HSA_PACKET_HEADER_WIDTH_SCRELEASE_FENCE_SCOPE = 2,
  HSA_PACKET_HEADER_WIDTH_RELEASE_FENCE_SCOPE = 2
} hsa_packet_header_width_t;
typedef enum 
{
  HSA_KERNEL_DISPATCH_PACKET_SETUP_DIMENSIONS = 0
} hsa_kernel_dispatch_packet_setup_t;
typedef enum 
{
  HSA_KERNEL_DISPATCH_PACKET_SETUP_WIDTH_DIMENSIONS = 2
} hsa_kernel_dispatch_packet_setup_width_t;
typedef struct hsa_kernel_dispatch_packet_s
{
  uint16_t header;
  uint16_t setup;
  uint16_t workgroup_size_x;
  uint16_t workgroup_size_y;
  uint16_t workgroup_size_z;
  uint16_t reserved0;
  uint32_t grid_size_x;
  uint32_t grid_size_y;
  uint32_t grid_size_z;
  uint32_t private_segment_size;
  uint32_t group_segment_size;
  uint64_t kernel_object;
  void *kernarg_address;
  uint64_t reserved2;
  hsa_signal_t completion_signal;
} hsa_kernel_dispatch_packet_t;
typedef struct hsa_agent_dispatch_packet_s
{
  uint16_t header;
  uint16_t type;
  uint32_t reserved0;
  void *return_address;
  uint64_t arg[4];
  uint64_t reserved2;
  hsa_signal_t completion_signal;
} hsa_agent_dispatch_packet_t;
typedef struct hsa_barrier_and_packet_s
{
  uint16_t header;
  uint16_t reserved0;
  uint32_t reserved1;
  hsa_signal_t dep_signal[5];
  uint64_t reserved2;
  hsa_signal_t completion_signal;
} hsa_barrier_and_packet_t;
typedef struct hsa_barrier_or_packet_s
{
  uint16_t header;
  uint16_t reserved0;
  uint32_t reserved1;
  hsa_signal_t dep_signal[5];
  uint64_t reserved2;
  hsa_signal_t completion_signal;
} hsa_barrier_or_packet_t;
typedef enum 
{
  HSA_REGION_SEGMENT_GLOBAL = 0,
  HSA_REGION_SEGMENT_READONLY = 1,
  HSA_REGION_SEGMENT_PRIVATE = 2,
  HSA_REGION_SEGMENT_GROUP = 3,
  HSA_REGION_SEGMENT_KERNARG = 4
} hsa_region_segment_t;
typedef enum 
{
  HSA_REGION_GLOBAL_FLAG_KERNARG = 1,
  HSA_REGION_GLOBAL_FLAG_FINE_GRAINED = 2,
  HSA_REGION_GLOBAL_FLAG_COARSE_GRAINED = 4
} hsa_region_global_flag_t;
typedef enum 
{
  HSA_REGION_INFO_SEGMENT = 0,
  HSA_REGION_INFO_GLOBAL_FLAGS = 1,
  HSA_REGION_INFO_SIZE = 2,
  HSA_REGION_INFO_ALLOC_MAX_SIZE = 4,
  HSA_REGION_INFO_ALLOC_MAX_PRIVATE_WORKGROUP_SIZE = 8,
  HSA_REGION_INFO_RUNTIME_ALLOC_ALLOWED = 5,
  HSA_REGION_INFO_RUNTIME_ALLOC_GRANULE = 6,
  HSA_REGION_INFO_RUNTIME_ALLOC_ALIGNMENT = 7
} hsa_region_info_t;
typedef hsa_status_t hsaew_hsa_region_get_info(hsa_region_t region, hsa_region_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_agent_iterate_regions(hsa_agent_t agent, hsa_status_t (*callback)(hsa_region_t region, void *data), void *data);
typedef hsa_status_t hsaew_hsa_memory_allocate(hsa_region_t region, size_t size, void **ptr);
typedef hsa_status_t hsaew_hsa_memory_free(void *ptr);
typedef hsa_status_t hsaew_hsa_memory_copy(void *dst, const void *src, size_t size);
typedef hsa_status_t hsaew_hsa_memory_assign_agent(void *ptr, hsa_agent_t agent, hsa_access_permission_t access);
typedef hsa_status_t hsaew_hsa_memory_register(void *ptr, size_t size);
typedef hsa_status_t hsaew_hsa_memory_deregister(void *ptr, size_t size);
typedef struct hsa_isa_s
{
  uint64_t handle;
} hsa_isa_t;
typedef hsa_status_t hsaew_hsa_isa_from_name(const char *name, hsa_isa_t *isa);
typedef hsa_status_t hsaew_hsa_agent_iterate_isas(hsa_agent_t agent, hsa_status_t (*callback)(hsa_isa_t isa, void *data), void *data);
typedef enum 
{
  HSA_ISA_INFO_NAME_LENGTH = 0,
  HSA_ISA_INFO_NAME = 1,
  HSA_ISA_INFO_CALL_CONVENTION_COUNT = 2,
  HSA_ISA_INFO_CALL_CONVENTION_INFO_WAVEFRONT_SIZE = 3,
  HSA_ISA_INFO_CALL_CONVENTION_INFO_WAVEFRONTS_PER_COMPUTE_UNIT = 4,
  HSA_ISA_INFO_MACHINE_MODELS = 5,
  HSA_ISA_INFO_PROFILES = 6,
  HSA_ISA_INFO_DEFAULT_FLOAT_ROUNDING_MODES = 7,
  HSA_ISA_INFO_BASE_PROFILE_DEFAULT_FLOAT_ROUNDING_MODES = 8,
  HSA_ISA_INFO_FAST_F16_OPERATION = 9,
  HSA_ISA_INFO_WORKGROUP_MAX_DIM = 12,
  HSA_ISA_INFO_WORKGROUP_MAX_SIZE = 13,
  HSA_ISA_INFO_GRID_MAX_DIM = 14,
  HSA_ISA_INFO_GRID_MAX_SIZE = 16,
  HSA_ISA_INFO_FBARRIER_MAX_SIZE = 17
} hsa_isa_info_t;
typedef hsa_status_t hsaew_hsa_isa_get_info(hsa_isa_t isa, hsa_isa_info_t attribute, uint32_t index, void *value);
typedef hsa_status_t hsaew_hsa_isa_get_info_alt(hsa_isa_t isa, hsa_isa_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_isa_get_exception_policies(hsa_isa_t isa, hsa_profile_t profile, uint16_t *mask);
typedef enum 
{
  HSA_FP_TYPE_16 = 1,
  HSA_FP_TYPE_32 = 2,
  HSA_FP_TYPE_64 = 4
} hsa_fp_type_t;
typedef enum 
{
  HSA_FLUSH_MODE_FTZ = 1,
  HSA_FLUSH_MODE_NON_FTZ = 2
} hsa_flush_mode_t;
typedef enum 
{
  HSA_ROUND_METHOD_SINGLE = 1,
  HSA_ROUND_METHOD_DOUBLE = 2
} hsa_round_method_t;
typedef hsa_status_t hsaew_hsa_isa_get_round_method(hsa_isa_t isa, hsa_fp_type_t fp_type, hsa_flush_mode_t flush_mode, hsa_round_method_t *round_method);
typedef struct hsa_wavefront_s
{
  uint64_t handle;
} hsa_wavefront_t;
typedef enum 
{
  HSA_WAVEFRONT_INFO_SIZE = 0
} hsa_wavefront_info_t;
typedef hsa_status_t hsaew_hsa_wavefront_get_info(hsa_wavefront_t wavefront, hsa_wavefront_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_isa_iterate_wavefronts(hsa_isa_t isa, hsa_status_t (*callback)(hsa_wavefront_t wavefront, void *data), void *data);
typedef hsa_status_t hsaew_hsa_isa_compatible(hsa_isa_t code_object_isa, hsa_isa_t agent_isa, bool *result);
typedef struct hsa_code_object_reader_s
{
  uint64_t handle;
} hsa_code_object_reader_t;
typedef hsa_status_t hsaew_hsa_code_object_reader_create_from_file(hsa_file_t file, hsa_code_object_reader_t *code_object_reader);
typedef hsa_status_t hsaew_hsa_code_object_reader_create_from_memory(const void *code_object, size_t size, hsa_code_object_reader_t *code_object_reader);
typedef hsa_status_t hsaew_hsa_code_object_reader_destroy(hsa_code_object_reader_t code_object_reader);
typedef struct hsa_executable_s
{
  uint64_t handle;
} hsa_executable_t;
typedef enum 
{
  HSA_EXECUTABLE_STATE_UNFROZEN = 0,
  HSA_EXECUTABLE_STATE_FROZEN = 1
} hsa_executable_state_t;
typedef hsa_status_t hsaew_hsa_executable_create(hsa_profile_t profile, hsa_executable_state_t executable_state, const char *options, hsa_executable_t *executable);
typedef hsa_status_t hsaew_hsa_executable_create_alt(hsa_profile_t profile, hsa_default_float_rounding_mode_t default_float_rounding_mode, const char *options, hsa_executable_t *executable);
typedef hsa_status_t hsaew_hsa_executable_destroy(hsa_executable_t executable);
typedef struct hsa_loaded_code_object_s
{
  uint64_t handle;
} hsa_loaded_code_object_t;
typedef hsa_status_t hsaew_hsa_executable_load_program_code_object(hsa_executable_t executable, hsa_code_object_reader_t code_object_reader, const char *options, hsa_loaded_code_object_t *loaded_code_object);
typedef hsa_status_t hsaew_hsa_executable_load_agent_code_object(hsa_executable_t executable, hsa_agent_t agent, hsa_code_object_reader_t code_object_reader, const char *options, hsa_loaded_code_object_t *loaded_code_object);
typedef hsa_status_t hsaew_hsa_executable_freeze(hsa_executable_t executable, const char *options);
typedef enum 
{
  HSA_EXECUTABLE_INFO_PROFILE = 1,
  HSA_EXECUTABLE_INFO_STATE = 2,
  HSA_EXECUTABLE_INFO_DEFAULT_FLOAT_ROUNDING_MODE = 3
} hsa_executable_info_t;
typedef hsa_status_t hsaew_hsa_executable_get_info(hsa_executable_t executable, hsa_executable_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_executable_global_variable_define(hsa_executable_t executable, const char *variable_name, void *address);
typedef hsa_status_t hsaew_hsa_executable_agent_global_variable_define(hsa_executable_t executable, hsa_agent_t agent, const char *variable_name, void *address);
typedef hsa_status_t hsaew_hsa_executable_readonly_variable_define(hsa_executable_t executable, hsa_agent_t agent, const char *variable_name, void *address);
typedef hsa_status_t hsaew_hsa_executable_validate(hsa_executable_t executable, uint32_t *result);
typedef hsa_status_t hsaew_hsa_executable_validate_alt(hsa_executable_t executable, const char *options, uint32_t *result);
typedef struct hsa_executable_symbol_s
{
  uint64_t handle;
} hsa_executable_symbol_t;
typedef hsa_status_t hsaew_hsa_executable_get_symbol(hsa_executable_t executable, const char *module_name, const char *symbol_name, hsa_agent_t agent, int32_t call_convention, hsa_executable_symbol_t *symbol);
typedef hsa_status_t hsaew_hsa_executable_get_symbol_by_name(hsa_executable_t executable, const char *symbol_name, const hsa_agent_t *agent, hsa_executable_symbol_t *symbol);
typedef enum 
{
  HSA_SYMBOL_KIND_VARIABLE = 0,
  HSA_SYMBOL_KIND_KERNEL = 1,
  HSA_SYMBOL_KIND_INDIRECT_FUNCTION = 2
} hsa_symbol_kind_t;
typedef enum 
{
  HSA_SYMBOL_LINKAGE_MODULE = 0,
  HSA_SYMBOL_LINKAGE_PROGRAM = 1
} hsa_symbol_linkage_t;
typedef enum 
{
  HSA_VARIABLE_ALLOCATION_AGENT = 0,
  HSA_VARIABLE_ALLOCATION_PROGRAM = 1
} hsa_variable_allocation_t;
typedef enum 
{
  HSA_VARIABLE_SEGMENT_GLOBAL = 0,
  HSA_VARIABLE_SEGMENT_READONLY = 1
} hsa_variable_segment_t;
typedef enum 
{
  HSA_EXECUTABLE_SYMBOL_INFO_TYPE = 0,
  HSA_EXECUTABLE_SYMBOL_INFO_NAME_LENGTH = 1,
  HSA_EXECUTABLE_SYMBOL_INFO_NAME = 2,
  HSA_EXECUTABLE_SYMBOL_INFO_MODULE_NAME_LENGTH = 3,
  HSA_EXECUTABLE_SYMBOL_INFO_MODULE_NAME = 4,
  HSA_EXECUTABLE_SYMBOL_INFO_AGENT = 20,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_ADDRESS = 21,
  HSA_EXECUTABLE_SYMBOL_INFO_LINKAGE = 5,
  HSA_EXECUTABLE_SYMBOL_INFO_IS_DEFINITION = 17,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_ALLOCATION = 6,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_SEGMENT = 7,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_ALIGNMENT = 8,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_SIZE = 9,
  HSA_EXECUTABLE_SYMBOL_INFO_VARIABLE_IS_CONST = 10,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_OBJECT = 22,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_SIZE = 11,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_ALIGNMENT = 12,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_GROUP_SEGMENT_SIZE = 13,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_PRIVATE_SEGMENT_SIZE = 14,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_DYNAMIC_CALLSTACK = 15,
  HSA_EXECUTABLE_SYMBOL_INFO_KERNEL_CALL_CONVENTION = 18,
  HSA_EXECUTABLE_SYMBOL_INFO_INDIRECT_FUNCTION_OBJECT = 23,
  HSA_EXECUTABLE_SYMBOL_INFO_INDIRECT_FUNCTION_CALL_CONVENTION = 16
} hsa_executable_symbol_info_t;
typedef hsa_status_t hsaew_hsa_executable_symbol_get_info(hsa_executable_symbol_t executable_symbol, hsa_executable_symbol_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_executable_iterate_symbols(hsa_executable_t executable, hsa_status_t (*callback)(hsa_executable_t exec, hsa_executable_symbol_t symbol, void *data), void *data);
typedef hsa_status_t hsaew_hsa_executable_iterate_agent_symbols(hsa_executable_t executable, hsa_agent_t agent, hsa_status_t (*callback)(hsa_executable_t exec, hsa_agent_t agent, hsa_executable_symbol_t symbol, void *data), void *data);
typedef hsa_status_t hsaew_hsa_executable_iterate_program_symbols(hsa_executable_t executable, hsa_status_t (*callback)(hsa_executable_t exec, hsa_executable_symbol_t symbol, void *data), void *data);
typedef struct hsa_code_object_s
{
  uint64_t handle;
} hsa_code_object_t;
typedef struct hsa_callback_data_s
{
  uint64_t handle;
} hsa_callback_data_t;
typedef hsa_status_t hsaew_hsa_code_object_serialize(hsa_code_object_t code_object, hsa_status_t (*alloc_callback)(size_t size, hsa_callback_data_t data, void **address), hsa_callback_data_t callback_data, const char *options, void **serialized_code_object, size_t *serialized_code_object_size);
typedef hsa_status_t hsaew_hsa_code_object_deserialize(void *serialized_code_object, size_t serialized_code_object_size, const char *options, hsa_code_object_t *code_object);
typedef hsa_status_t hsaew_hsa_code_object_destroy(hsa_code_object_t code_object);
typedef enum 
{
  HSA_CODE_OBJECT_TYPE_PROGRAM = 0
} hsa_code_object_type_t;
typedef enum 
{
  HSA_CODE_OBJECT_INFO_VERSION = 0,
  HSA_CODE_OBJECT_INFO_TYPE = 1,
  HSA_CODE_OBJECT_INFO_ISA = 2,
  HSA_CODE_OBJECT_INFO_MACHINE_MODEL = 3,
  HSA_CODE_OBJECT_INFO_PROFILE = 4,
  HSA_CODE_OBJECT_INFO_DEFAULT_FLOAT_ROUNDING_MODE = 5
} hsa_code_object_info_t;
typedef hsa_status_t hsaew_hsa_code_object_get_info(hsa_code_object_t code_object, hsa_code_object_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_executable_load_code_object(hsa_executable_t executable, hsa_agent_t agent, hsa_code_object_t code_object, const char *options);
typedef struct hsa_code_symbol_s
{
  uint64_t handle;
} hsa_code_symbol_t;
typedef hsa_status_t hsaew_hsa_code_object_get_symbol(hsa_code_object_t code_object, const char *symbol_name, hsa_code_symbol_t *symbol);
typedef hsa_status_t hsaew_hsa_code_object_get_symbol_from_name(hsa_code_object_t code_object, const char *module_name, const char *symbol_name, hsa_code_symbol_t *symbol);
typedef enum 
{
  HSA_CODE_SYMBOL_INFO_TYPE = 0,
  HSA_CODE_SYMBOL_INFO_NAME_LENGTH = 1,
  HSA_CODE_SYMBOL_INFO_NAME = 2,
  HSA_CODE_SYMBOL_INFO_MODULE_NAME_LENGTH = 3,
  HSA_CODE_SYMBOL_INFO_MODULE_NAME = 4,
  HSA_CODE_SYMBOL_INFO_LINKAGE = 5,
  HSA_CODE_SYMBOL_INFO_IS_DEFINITION = 17,
  HSA_CODE_SYMBOL_INFO_VARIABLE_ALLOCATION = 6,
  HSA_CODE_SYMBOL_INFO_VARIABLE_SEGMENT = 7,
  HSA_CODE_SYMBOL_INFO_VARIABLE_ALIGNMENT = 8,
  HSA_CODE_SYMBOL_INFO_VARIABLE_SIZE = 9,
  HSA_CODE_SYMBOL_INFO_VARIABLE_IS_CONST = 10,
  HSA_CODE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_SIZE = 11,
  HSA_CODE_SYMBOL_INFO_KERNEL_KERNARG_SEGMENT_ALIGNMENT = 12,
  HSA_CODE_SYMBOL_INFO_KERNEL_GROUP_SEGMENT_SIZE = 13,
  HSA_CODE_SYMBOL_INFO_KERNEL_PRIVATE_SEGMENT_SIZE = 14,
  HSA_CODE_SYMBOL_INFO_KERNEL_DYNAMIC_CALLSTACK = 15,
  HSA_CODE_SYMBOL_INFO_KERNEL_CALL_CONVENTION = 18,
  HSA_CODE_SYMBOL_INFO_INDIRECT_FUNCTION_CALL_CONVENTION = 16
} hsa_code_symbol_info_t;
typedef hsa_status_t hsaew_hsa_code_symbol_get_info(hsa_code_symbol_t code_symbol, hsa_code_symbol_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_code_object_iterate_symbols(hsa_code_object_t code_object, hsa_status_t (*callback)(hsa_code_object_t code_object, hsa_code_symbol_t symbol, void *data), void *data);
typedef struct hsa_ext_image_s
{
  uint64_t handle;
} hsa_ext_image_t;
typedef enum 
{
  HSA_EXT_IMAGE_GEOMETRY_1D = 0,
  HSA_EXT_IMAGE_GEOMETRY_2D = 1,
  HSA_EXT_IMAGE_GEOMETRY_3D = 2,
  HSA_EXT_IMAGE_GEOMETRY_1DA = 3,
  HSA_EXT_IMAGE_GEOMETRY_2DA = 4,
  HSA_EXT_IMAGE_GEOMETRY_1DB = 5,
  HSA_EXT_IMAGE_GEOMETRY_2DDEPTH = 6,
  HSA_EXT_IMAGE_GEOMETRY_2DADEPTH = 7
} hsa_ext_image_geometry_t;
typedef enum 
{
  HSA_EXT_IMAGE_CHANNEL_TYPE_SNORM_INT8 = 0,
  HSA_EXT_IMAGE_CHANNEL_TYPE_SNORM_INT16 = 1,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_INT8 = 2,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_INT16 = 3,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_INT24 = 4,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_SHORT_555 = 5,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_SHORT_565 = 6,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNORM_SHORT_101010 = 7,
  HSA_EXT_IMAGE_CHANNEL_TYPE_SIGNED_INT8 = 8,
  HSA_EXT_IMAGE_CHANNEL_TYPE_SIGNED_INT16 = 9,
  HSA_EXT_IMAGE_CHANNEL_TYPE_SIGNED_INT32 = 10,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNSIGNED_INT8 = 11,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNSIGNED_INT16 = 12,
  HSA_EXT_IMAGE_CHANNEL_TYPE_UNSIGNED_INT32 = 13,
  HSA_EXT_IMAGE_CHANNEL_TYPE_HALF_FLOAT = 14,
  HSA_EXT_IMAGE_CHANNEL_TYPE_FLOAT = 15
} hsa_ext_image_channel_type_t;
typedef uint32_t hsa_ext_image_channel_type32_t;
typedef enum 
{
  HSA_EXT_IMAGE_CHANNEL_ORDER_A = 0,
  HSA_EXT_IMAGE_CHANNEL_ORDER_R = 1,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RX = 2,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RG = 3,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RGX = 4,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RA = 5,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RGB = 6,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RGBX = 7,
  HSA_EXT_IMAGE_CHANNEL_ORDER_RGBA = 8,
  HSA_EXT_IMAGE_CHANNEL_ORDER_BGRA = 9,
  HSA_EXT_IMAGE_CHANNEL_ORDER_ARGB = 10,
  HSA_EXT_IMAGE_CHANNEL_ORDER_ABGR = 11,
  HSA_EXT_IMAGE_CHANNEL_ORDER_SRGB = 12,
  HSA_EXT_IMAGE_CHANNEL_ORDER_SRGBX = 13,
  HSA_EXT_IMAGE_CHANNEL_ORDER_SRGBA = 14,
  HSA_EXT_IMAGE_CHANNEL_ORDER_SBGRA = 15,
  HSA_EXT_IMAGE_CHANNEL_ORDER_INTENSITY = 16,
  HSA_EXT_IMAGE_CHANNEL_ORDER_LUMINANCE = 17,
  HSA_EXT_IMAGE_CHANNEL_ORDER_DEPTH = 18,
  HSA_EXT_IMAGE_CHANNEL_ORDER_DEPTH_STENCIL = 19
} hsa_ext_image_channel_order_t;
typedef uint32_t hsa_ext_image_channel_order32_t;
typedef struct hsa_ext_image_format_s
{
  hsa_ext_image_channel_type32_t channel_type;
  hsa_ext_image_channel_order32_t channel_order;
} hsa_ext_image_format_t;
typedef struct hsa_ext_image_descriptor_s
{
  hsa_ext_image_geometry_t geometry;
  size_t width;
  size_t height;
  size_t depth;
  size_t array_size;
  hsa_ext_image_format_t format;
} hsa_ext_image_descriptor_t;
typedef enum 
{
  HSA_EXT_IMAGE_CAPABILITY_NOT_SUPPORTED = 0x0,
  HSA_EXT_IMAGE_CAPABILITY_READ_ONLY = 0x1,
  HSA_EXT_IMAGE_CAPABILITY_WRITE_ONLY = 0x2,
  HSA_EXT_IMAGE_CAPABILITY_READ_WRITE = 0x4,
  HSA_EXT_IMAGE_CAPABILITY_READ_MODIFY_WRITE = 0x8,
  HSA_EXT_IMAGE_CAPABILITY_ACCESS_INVARIANT_DATA_LAYOUT = 0x10
} hsa_ext_image_capability_t;
typedef enum 
{
  HSA_EXT_IMAGE_DATA_LAYOUT_OPAQUE = 0x0,
  HSA_EXT_IMAGE_DATA_LAYOUT_LINEAR = 0x1
} hsa_ext_image_data_layout_t;
typedef hsa_status_t hsaew_hsa_ext_image_get_capability(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t *image_format, uint32_t *capability_mask);
typedef hsa_status_t hsaew_hsa_ext_image_get_capability_with_layout(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t *image_format, hsa_ext_image_data_layout_t image_data_layout, uint32_t *capability_mask);
typedef struct hsa_ext_image_data_info_s
{
  size_t size;
  size_t alignment;
} hsa_ext_image_data_info_t;
typedef hsa_status_t hsaew_hsa_ext_image_data_get_info(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_info_t *image_data_info);
typedef hsa_status_t hsaew_hsa_ext_image_data_get_info_with_layout(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_layout_t image_data_layout, size_t image_data_row_pitch, size_t image_data_slice_pitch, hsa_ext_image_data_info_t *image_data_info);
typedef hsa_status_t hsaew_hsa_ext_image_create(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_t *image);
typedef hsa_status_t hsaew_hsa_ext_image_create_with_layout(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_data_layout_t image_data_layout, size_t image_data_row_pitch, size_t image_data_slice_pitch, hsa_ext_image_t *image);
typedef hsa_status_t hsaew_hsa_ext_image_destroy(hsa_agent_t agent, hsa_ext_image_t image);
typedef hsa_status_t hsaew_hsa_ext_image_copy(hsa_agent_t agent, hsa_ext_image_t src_image, const hsa_dim3_t *src_offset, hsa_ext_image_t dst_image, const hsa_dim3_t *dst_offset, const hsa_dim3_t *range);
typedef struct hsa_ext_image_region_s
{
  hsa_dim3_t offset;
  hsa_dim3_t range;
} hsa_ext_image_region_t;
typedef hsa_status_t hsaew_hsa_ext_image_import(hsa_agent_t agent, const void *src_memory, size_t src_row_pitch, size_t src_slice_pitch, hsa_ext_image_t dst_image, const hsa_ext_image_region_t *image_region);
typedef hsa_status_t hsaew_hsa_ext_image_export(hsa_agent_t agent, hsa_ext_image_t src_image, void *dst_memory, size_t dst_row_pitch, size_t dst_slice_pitch, const hsa_ext_image_region_t *image_region);
typedef hsa_status_t hsaew_hsa_ext_image_clear(hsa_agent_t agent, hsa_ext_image_t image, const void *data, const hsa_ext_image_region_t *image_region);
typedef struct hsa_ext_sampler_s
{
  uint64_t handle;
} hsa_ext_sampler_t;
typedef enum 
{
  HSA_EXT_SAMPLER_ADDRESSING_MODE_UNDEFINED = 0,
  HSA_EXT_SAMPLER_ADDRESSING_MODE_CLAMP_TO_EDGE = 1,
  HSA_EXT_SAMPLER_ADDRESSING_MODE_CLAMP_TO_BORDER = 2,
  HSA_EXT_SAMPLER_ADDRESSING_MODE_REPEAT = 3,
  HSA_EXT_SAMPLER_ADDRESSING_MODE_MIRRORED_REPEAT = 4
} hsa_ext_sampler_addressing_mode_t;
typedef uint32_t hsa_ext_sampler_addressing_mode32_t;
typedef enum 
{
  HSA_EXT_SAMPLER_COORDINATE_MODE_UNNORMALIZED = 0,
  HSA_EXT_SAMPLER_COORDINATE_MODE_NORMALIZED = 1
} hsa_ext_sampler_coordinate_mode_t;
typedef uint32_t hsa_ext_sampler_coordinate_mode32_t;
typedef enum 
{
  HSA_EXT_SAMPLER_FILTER_MODE_NEAREST = 0,
  HSA_EXT_SAMPLER_FILTER_MODE_LINEAR = 1
} hsa_ext_sampler_filter_mode_t;
typedef uint32_t hsa_ext_sampler_filter_mode32_t;
typedef struct hsa_ext_sampler_descriptor_s
{
  hsa_ext_sampler_coordinate_mode32_t coordinate_mode;
  hsa_ext_sampler_filter_mode32_t filter_mode;
  hsa_ext_sampler_addressing_mode32_t address_mode;
} hsa_ext_sampler_descriptor_t;
typedef hsa_status_t hsaew_hsa_ext_sampler_create(hsa_agent_t agent, const hsa_ext_sampler_descriptor_t *sampler_descriptor, hsa_ext_sampler_t *sampler);
typedef hsa_status_t hsaew_hsa_ext_sampler_destroy(hsa_agent_t agent, hsa_ext_sampler_t sampler);
typedef struct hsa_ext_images_1_00_pfn_s
{
  hsa_status_t (*hsa_ext_image_get_capability)(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t *image_format, uint32_t *capability_mask);
  hsa_status_t (*hsa_ext_image_data_get_info)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_info_t *image_data_info);
  hsa_status_t (*hsa_ext_image_create)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_t *image);
  hsa_status_t (*hsa_ext_image_destroy)(hsa_agent_t agent, hsa_ext_image_t image);
  hsa_status_t (*hsa_ext_image_copy)(hsa_agent_t agent, hsa_ext_image_t src_image, const hsa_dim3_t *src_offset, hsa_ext_image_t dst_image, const hsa_dim3_t *dst_offset, const hsa_dim3_t *range);
  hsa_status_t (*hsa_ext_image_import)(hsa_agent_t agent, const void *src_memory, size_t src_row_pitch, size_t src_slice_pitch, hsa_ext_image_t dst_image, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_image_export)(hsa_agent_t agent, hsa_ext_image_t src_image, void *dst_memory, size_t dst_row_pitch, size_t dst_slice_pitch, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_image_clear)(hsa_agent_t agent, hsa_ext_image_t image, const void *data, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_sampler_create)(hsa_agent_t agent, const hsa_ext_sampler_descriptor_t *sampler_descriptor, hsa_ext_sampler_t *sampler);
  hsa_status_t (*hsa_ext_sampler_destroy)(hsa_agent_t agent, hsa_ext_sampler_t sampler);
} hsa_ext_images_1_00_pfn_t;
typedef struct hsa_ext_images_1_pfn_s
{
  hsa_status_t (*hsa_ext_image_get_capability)(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t *image_format, uint32_t *capability_mask);
  hsa_status_t (*hsa_ext_image_data_get_info)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_info_t *image_data_info);
  hsa_status_t (*hsa_ext_image_create)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_t *image);
  hsa_status_t (*hsa_ext_image_destroy)(hsa_agent_t agent, hsa_ext_image_t image);
  hsa_status_t (*hsa_ext_image_copy)(hsa_agent_t agent, hsa_ext_image_t src_image, const hsa_dim3_t *src_offset, hsa_ext_image_t dst_image, const hsa_dim3_t *dst_offset, const hsa_dim3_t *range);
  hsa_status_t (*hsa_ext_image_import)(hsa_agent_t agent, const void *src_memory, size_t src_row_pitch, size_t src_slice_pitch, hsa_ext_image_t dst_image, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_image_export)(hsa_agent_t agent, hsa_ext_image_t src_image, void *dst_memory, size_t dst_row_pitch, size_t dst_slice_pitch, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_image_clear)(hsa_agent_t agent, hsa_ext_image_t image, const void *data, const hsa_ext_image_region_t *image_region);
  hsa_status_t (*hsa_ext_sampler_create)(hsa_agent_t agent, const hsa_ext_sampler_descriptor_t *sampler_descriptor, hsa_ext_sampler_t *sampler);
  hsa_status_t (*hsa_ext_sampler_destroy)(hsa_agent_t agent, hsa_ext_sampler_t sampler);
  hsa_status_t (*hsa_ext_image_get_capability_with_layout)(hsa_agent_t agent, hsa_ext_image_geometry_t geometry, const hsa_ext_image_format_t *image_format, hsa_ext_image_data_layout_t image_data_layout, uint32_t *capability_mask);
  hsa_status_t (*hsa_ext_image_data_get_info_with_layout)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, hsa_access_permission_t access_permission, hsa_ext_image_data_layout_t image_data_layout, size_t image_data_row_pitch, size_t image_data_slice_pitch, hsa_ext_image_data_info_t *image_data_info);
  hsa_status_t (*hsa_ext_image_create_with_layout)(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_data_layout_t image_data_layout, size_t image_data_row_pitch, size_t image_data_slice_pitch, hsa_ext_image_t *image);
} hsa_ext_images_1_pfn_t;
typedef uint32_t hsa_signal_condition32_t;
typedef enum 
{
  HSA_AMD_PACKET_TYPE_BARRIER_VALUE = 2
} hsa_amd_packet_type_t;
typedef uint8_t hsa_amd_packet_type8_t;
typedef struct hsa_amd_packet_header_s
{
  uint16_t header;
  hsa_amd_packet_type8_t AmdFormat;
  uint8_t reserved;
} hsa_amd_vendor_packet_header_t;
typedef struct hsa_amd_barrier_value_packet_s
{
  hsa_amd_vendor_packet_header_t header;
  uint32_t reserved0;
  hsa_signal_t signal;
  hsa_signal_value_t value;
  hsa_signal_value_t mask;
  hsa_signal_condition32_t cond;
  uint32_t reserved1;
  uint64_t reserved2;
  uint64_t reserved3;
  hsa_signal_t completion_signal;
} hsa_amd_barrier_value_packet_t;
typedef enum hsa_amd_agent_info_s
{
  HSA_AMD_AGENT_INFO_CHIP_ID = 0xA000,
  HSA_AMD_AGENT_INFO_CACHELINE_SIZE = 0xA001,
  HSA_AMD_AGENT_INFO_COMPUTE_UNIT_COUNT = 0xA002,
  HSA_AMD_AGENT_INFO_MAX_CLOCK_FREQUENCY = 0xA003,
  HSA_AMD_AGENT_INFO_DRIVER_NODE_ID = 0xA004,
  HSA_AMD_AGENT_INFO_MAX_ADDRESS_WATCH_POINTS = 0xA005,
  HSA_AMD_AGENT_INFO_BDFID = 0xA006,
  HSA_AMD_AGENT_INFO_MEMORY_WIDTH = 0xA007,
  HSA_AMD_AGENT_INFO_MEMORY_MAX_FREQUENCY = 0xA008,
  HSA_AMD_AGENT_INFO_PRODUCT_NAME = 0xA009,
  HSA_AMD_AGENT_INFO_MAX_WAVES_PER_CU = 0xA00A,
  HSA_AMD_AGENT_INFO_NUM_SIMDS_PER_CU = 0xA00B,
  HSA_AMD_AGENT_INFO_NUM_SHADER_ENGINES = 0xA00C,
  HSA_AMD_AGENT_INFO_NUM_SHADER_ARRAYS_PER_SE = 0xA00D,
  HSA_AMD_AGENT_INFO_HDP_FLUSH = 0xA00E,
  HSA_AMD_AGENT_INFO_DOMAIN = 0xA00F,
  HSA_AMD_AGENT_INFO_COOPERATIVE_QUEUES = 0xA010,
  HSA_AMD_AGENT_INFO_UUID = 0xA011,
  HSA_AMD_AGENT_INFO_ASIC_REVISION = 0xA012,
  HSA_AMD_AGENT_INFO_SVM_DIRECT_HOST_ACCESS = 0xA013,
  HSA_AMD_AGENT_INFO_COOPERATIVE_COMPUTE_UNIT_COUNT = 0xA014
} hsa_amd_agent_info_t;
typedef struct hsa_amd_hdp_flush_s
{
  uint32_t *HDP_MEM_FLUSH_CNTL;
  uint32_t *HDP_REG_FLUSH_CNTL;
} hsa_amd_hdp_flush_t;
typedef enum hsa_amd_region_info_s
{
  HSA_AMD_REGION_INFO_HOST_ACCESSIBLE = 0xA000,
  HSA_AMD_REGION_INFO_BASE = 0xA001,
  HSA_AMD_REGION_INFO_BUS_WIDTH = 0xA002,
  HSA_AMD_REGION_INFO_MAX_CLOCK_FREQUENCY = 0xA003
} hsa_amd_region_info_t;
typedef enum hsa_amd_coherency_type_s
{
  HSA_AMD_COHERENCY_TYPE_COHERENT = 0,
  HSA_AMD_COHERENCY_TYPE_NONCOHERENT = 1
} hsa_amd_coherency_type_t;
typedef hsa_status_t hsaew_hsa_amd_coherency_get_type(hsa_agent_t agent, hsa_amd_coherency_type_t *type);
typedef hsa_status_t hsaew_hsa_amd_coherency_set_type(hsa_agent_t agent, hsa_amd_coherency_type_t type);
typedef struct hsa_amd_profiling_dispatch_time_s
{
  uint64_t start;
  uint64_t end;
} hsa_amd_profiling_dispatch_time_t;
typedef struct hsa_amd_profiling_async_copy_time_s
{
  uint64_t start;
  uint64_t end;
} hsa_amd_profiling_async_copy_time_t;
typedef hsa_status_t hsaew_hsa_amd_profiling_set_profiler_enabled(hsa_queue_t *queue, int enable);
typedef hsa_status_t hsaew_hsa_amd_profiling_async_copy_enable(bool enable);
typedef hsa_status_t hsaew_hsa_amd_profiling_get_dispatch_time(hsa_agent_t agent, hsa_signal_t signal, hsa_amd_profiling_dispatch_time_t *time);
typedef hsa_status_t hsaew_hsa_amd_profiling_get_async_copy_time(hsa_signal_t signal, hsa_amd_profiling_async_copy_time_t *time);
typedef hsa_status_t hsaew_hsa_amd_profiling_convert_tick_to_system_domain(hsa_agent_t agent, uint64_t agent_tick, uint64_t *system_tick);
typedef enum 
{
  HSA_AMD_SIGNAL_AMD_GPU_ONLY = 1,
  HSA_AMD_SIGNAL_IPC = 2
} hsa_amd_signal_attribute_t;
typedef hsa_status_t hsaew_hsa_amd_signal_create(hsa_signal_value_t initial_value, uint32_t num_consumers, const hsa_agent_t *consumers, uint64_t attributes, hsa_signal_t *signal);
typedef hsa_status_t hsaew_hsa_amd_signal_value_pointer(hsa_signal_t signal, volatile hsa_signal_value_t **value_ptr);
typedef bool (*hsa_amd_signal_handler)(hsa_signal_value_t value, void *arg);
typedef hsa_status_t hsaew_hsa_amd_signal_async_handler(hsa_signal_t signal, hsa_signal_condition_t cond, hsa_signal_value_t value, hsa_amd_signal_handler handler, void *arg);
typedef hsa_status_t hsaew_hsa_amd_async_function(void (*callback)(void *arg), void *arg);
typedef uint32_t hsaew_hsa_amd_signal_wait_any(uint32_t signal_count, hsa_signal_t *signals, hsa_signal_condition_t *conds, hsa_signal_value_t *values, uint64_t timeout_hint, hsa_wait_state_t wait_hint, hsa_signal_value_t *satisfying_value);
typedef hsa_status_t hsaew_hsa_amd_image_get_info_max_dim(hsa_agent_t agent, hsa_agent_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_amd_queue_cu_set_mask(const hsa_queue_t *queue, uint32_t num_cu_mask_count, const uint32_t *cu_mask);
typedef hsa_status_t hsaew_hsa_amd_queue_cu_get_mask(const hsa_queue_t *queue, uint32_t num_cu_mask_count, uint32_t *cu_mask);
typedef enum 
{
  HSA_AMD_SEGMENT_GLOBAL = 0,
  HSA_AMD_SEGMENT_READONLY = 1,
  HSA_AMD_SEGMENT_PRIVATE = 2,
  HSA_AMD_SEGMENT_GROUP = 3
} hsa_amd_segment_t;
typedef struct hsa_amd_memory_pool_s
{
  uint64_t handle;
} hsa_amd_memory_pool_t;
typedef enum hsa_amd_memory_pool_global_flag_s
{
  HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_KERNARG_INIT = 1,
  HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_FINE_GRAINED = 2,
  HSA_AMD_MEMORY_POOL_GLOBAL_FLAG_COARSE_GRAINED = 4
} hsa_amd_memory_pool_global_flag_t;
typedef enum 
{
  HSA_AMD_MEMORY_POOL_INFO_SEGMENT = 0,
  HSA_AMD_MEMORY_POOL_INFO_GLOBAL_FLAGS = 1,
  HSA_AMD_MEMORY_POOL_INFO_SIZE = 2,
  HSA_AMD_MEMORY_POOL_INFO_RUNTIME_ALLOC_ALLOWED = 5,
  HSA_AMD_MEMORY_POOL_INFO_RUNTIME_ALLOC_GRANULE = 6,
  HSA_AMD_MEMORY_POOL_INFO_RUNTIME_ALLOC_ALIGNMENT = 7,
  HSA_AMD_MEMORY_POOL_INFO_ACCESSIBLE_BY_ALL = 15,
  HSA_AMD_MEMORY_POOL_INFO_ALLOC_MAX_SIZE = 16
} hsa_amd_memory_pool_info_t;
typedef hsa_status_t hsaew_hsa_amd_memory_pool_get_info(hsa_amd_memory_pool_t memory_pool, hsa_amd_memory_pool_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_amd_agent_iterate_memory_pools(hsa_agent_t agent, hsa_status_t (*callback)(hsa_amd_memory_pool_t memory_pool, void *data), void *data);
typedef hsa_status_t hsaew_hsa_amd_memory_pool_allocate(hsa_amd_memory_pool_t memory_pool, size_t size, uint32_t flags, void **ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_pool_free(void *ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_async_copy(void *dst, hsa_agent_t dst_agent, const void *src, hsa_agent_t src_agent, size_t size, uint32_t num_dep_signals, const hsa_signal_t *dep_signals, hsa_signal_t completion_signal);
typedef struct hsa_pitched_ptr_s
{
  void *base;
  size_t pitch;
  size_t slice;
} hsa_pitched_ptr_t;
typedef enum 
{
  hsaHostToHost = 0,
  hsaHostToDevice = 1,
  hsaDeviceToHost = 2,
  hsaDeviceToDevice = 3
} hsa_amd_copy_direction_t;
typedef hsa_status_t hsaew_hsa_amd_memory_async_copy_rect(const hsa_pitched_ptr_t *dst, const hsa_dim3_t *dst_offset, const hsa_pitched_ptr_t *src, const hsa_dim3_t *src_offset, const hsa_dim3_t *range, hsa_agent_t copy_agent, hsa_amd_copy_direction_t dir, uint32_t num_dep_signals, const hsa_signal_t *dep_signals, hsa_signal_t completion_signal);
typedef enum 
{
  HSA_AMD_MEMORY_POOL_ACCESS_NEVER_ALLOWED = 0,
  HSA_AMD_MEMORY_POOL_ACCESS_ALLOWED_BY_DEFAULT = 1,
  HSA_AMD_MEMORY_POOL_ACCESS_DISALLOWED_BY_DEFAULT = 2
} hsa_amd_memory_pool_access_t;
typedef enum 
{
  HSA_AMD_LINK_INFO_TYPE_HYPERTRANSPORT = 0,
  HSA_AMD_LINK_INFO_TYPE_QPI = 1,
  HSA_AMD_LINK_INFO_TYPE_PCIE = 2,
  HSA_AMD_LINK_INFO_TYPE_INFINBAND = 3,
  HSA_AMD_LINK_INFO_TYPE_XGMI = 4
} hsa_amd_link_info_type_t;
typedef struct hsa_amd_memory_pool_link_info_s
{
  uint32_t min_latency;
  uint32_t max_latency;
  uint32_t min_bandwidth;
  uint32_t max_bandwidth;
  bool atomic_support_32bit;
  bool atomic_support_64bit;
  bool coherent_support;
  hsa_amd_link_info_type_t link_type;
  uint32_t numa_distance;
} hsa_amd_memory_pool_link_info_t;
typedef enum 
{
  HSA_AMD_AGENT_MEMORY_POOL_INFO_ACCESS = 0,
  HSA_AMD_AGENT_MEMORY_POOL_INFO_NUM_LINK_HOPS = 1,
  HSA_AMD_AGENT_MEMORY_POOL_INFO_LINK_INFO = 2
} hsa_amd_agent_memory_pool_info_t;
typedef hsa_status_t hsaew_hsa_amd_agent_memory_pool_get_info(hsa_agent_t agent, hsa_amd_memory_pool_t memory_pool, hsa_amd_agent_memory_pool_info_t attribute, void *value);
typedef hsa_status_t hsaew_hsa_amd_agents_allow_access(uint32_t num_agents, const hsa_agent_t *agents, const uint32_t *flags, const void *ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_pool_can_migrate(hsa_amd_memory_pool_t src_memory_pool, hsa_amd_memory_pool_t dst_memory_pool, bool *result);
typedef hsa_status_t hsaew_hsa_amd_memory_migrate(const void *ptr, hsa_amd_memory_pool_t memory_pool, uint32_t flags);
typedef hsa_status_t hsaew_hsa_amd_memory_lock(void *host_ptr, size_t size, hsa_agent_t *agents, int num_agent, void **agent_ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_lock_to_pool(void *host_ptr, size_t size, hsa_agent_t *agents, int num_agent, hsa_amd_memory_pool_t pool, uint32_t flags, void **agent_ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_unlock(void *host_ptr);
typedef hsa_status_t hsaew_hsa_amd_memory_fill(void *ptr, uint32_t value, size_t count);
typedef hsa_status_t hsaew_hsa_amd_interop_map_buffer(uint32_t num_agents, hsa_agent_t *agents, int interop_handle, uint32_t flags, size_t *size, void **ptr, size_t *metadata_size, const void **metadata);
typedef hsa_status_t hsaew_hsa_amd_interop_unmap_buffer(void *ptr);
typedef struct hsa_amd_image_descriptor_s
{
  uint32_t version;
  uint32_t deviceID;
  uint32_t data[1];
} hsa_amd_image_descriptor_t;
typedef hsa_status_t hsaew_hsa_amd_image_create(hsa_agent_t agent, const hsa_ext_image_descriptor_t *image_descriptor, const hsa_amd_image_descriptor_t *image_layout, const void *image_data, hsa_access_permission_t access_permission, hsa_ext_image_t *image);
typedef enum 
{
  HSA_EXT_POINTER_TYPE_UNKNOWN = 0,
  HSA_EXT_POINTER_TYPE_HSA = 1,
  HSA_EXT_POINTER_TYPE_LOCKED = 2,
  HSA_EXT_POINTER_TYPE_GRAPHICS = 3,
  HSA_EXT_POINTER_TYPE_IPC = 4
} hsa_amd_pointer_type_t;
typedef struct hsa_amd_pointer_info_s
{
  uint32_t size;
  hsa_amd_pointer_type_t type;
  void *agentBaseAddress;
  void *hostBaseAddress;
  size_t sizeInBytes;
  void *userData;
  hsa_agent_t agentOwner;
  uint32_t global_flags;
} hsa_amd_pointer_info_t;
typedef hsa_status_t hsaew_hsa_amd_pointer_info(const void *ptr, hsa_amd_pointer_info_t *info, void *(*alloc)(size_t), uint32_t *num_agents_accessible, hsa_agent_t **accessible);
typedef hsa_status_t hsaew_hsa_amd_pointer_info_set_userdata(const void *ptr, void *userdata);
typedef struct hsa_amd_ipc_memory_s
{
  uint32_t handle[8];
} hsa_amd_ipc_memory_t;
typedef hsa_status_t hsaew_hsa_amd_ipc_memory_create(void *ptr, size_t len, hsa_amd_ipc_memory_t *handle);
typedef hsa_status_t hsaew_hsa_amd_ipc_memory_attach(const hsa_amd_ipc_memory_t *handle, size_t len, uint32_t num_agents, const hsa_agent_t *mapping_agents, void **mapped_ptr);
typedef hsa_status_t hsaew_hsa_amd_ipc_memory_detach(void *mapped_ptr);
typedef hsa_amd_ipc_memory_t hsa_amd_ipc_signal_t;
typedef hsa_status_t hsaew_hsa_amd_ipc_signal_create(hsa_signal_t signal, hsa_amd_ipc_signal_t *handle);
typedef hsa_status_t hsaew_hsa_amd_ipc_signal_attach(const hsa_amd_ipc_signal_t *handle, hsa_signal_t *signal);
typedef enum hsa_amd_event_type_s
{
  HSA_AMD_GPU_MEMORY_FAULT_EVENT = 0
} hsa_amd_event_type_t;
typedef enum 
{
  HSA_AMD_MEMORY_FAULT_PAGE_NOT_PRESENT = 1 << 0,
  HSA_AMD_MEMORY_FAULT_READ_ONLY = 1 << 1,
  HSA_AMD_MEMORY_FAULT_NX = 1 << 2,
  HSA_AMD_MEMORY_FAULT_HOST_ONLY = 1 << 3,
  HSA_AMD_MEMORY_FAULT_DRAMECC = 1 << 4,
  HSA_AMD_MEMORY_FAULT_IMPRECISE = 1 << 5,
  HSA_AMD_MEMORY_FAULT_SRAMECC = 1 << 6,
  HSA_AMD_MEMORY_FAULT_HANG = 1 << 31
} hsa_amd_memory_fault_reason_t;
typedef struct hsa_amd_gpu_memory_fault_info_s
{
  hsa_agent_t agent;
  uint64_t virtual_address;
  uint32_t fault_reason_mask;
} hsa_amd_gpu_memory_fault_info_t;
typedef struct hsa_amd_event_s
{
  hsa_amd_event_type_t event_type;
  union 
  {
    hsa_amd_gpu_memory_fault_info_t memory_fault;
  };
} hsa_amd_event_t;
typedef hsa_status_t (*hsa_amd_system_event_callback_t)(const hsa_amd_event_t *event, void *data);
typedef hsa_status_t hsaew_hsa_amd_register_system_event_handler(hsa_amd_system_event_callback_t callback, void *data);
typedef enum hsa_amd_queue_priority_s
{
  HSA_AMD_QUEUE_PRIORITY_LOW = 0,
  HSA_AMD_QUEUE_PRIORITY_NORMAL = 1,
  HSA_AMD_QUEUE_PRIORITY_HIGH = 2
} hsa_amd_queue_priority_t;
typedef hsa_status_t hsaew_hsa_amd_queue_set_priority(hsa_queue_t *queue, hsa_amd_queue_priority_t priority);
typedef void (*hsa_amd_deallocation_callback_t)(void *ptr, void *user_data);
typedef hsa_status_t hsaew_hsa_amd_register_deallocation_callback(void *ptr, hsa_amd_deallocation_callback_t callback, void *user_data);
typedef hsa_status_t hsaew_hsa_amd_deregister_deallocation_callback(void *ptr, hsa_amd_deallocation_callback_t callback);
typedef enum hsa_amd_svm_model_s
{
  HSA_AMD_SVM_GLOBAL_FLAG_FINE_GRAINED = 0,
  HSA_AMD_SVM_GLOBAL_FLAG_COARSE_GRAINED = 1,
  HSA_AMD_SVM_GLOBAL_FLAG_INDETERMINATE = 2
} hsa_amd_svm_model_t;
typedef enum hsa_amd_svm_attribute_s
{
  HSA_AMD_SVM_ATTRIB_GLOBAL_FLAG = 0,
  HSA_AMD_SVM_ATTRIB_READ_ONLY = 1,
  HSA_AMD_SVM_ATTRIB_HIVE_LOCAL = 2,
  HSA_AMD_SVM_ATTRIB_MIGRATION_GRANULARITY = 3,
  HSA_AMD_SVM_ATTRIB_PREFERRED_LOCATION = 4,
  HSA_AMD_SVM_ATTRIB_PREFETCH_LOCATION = 5,
  HSA_AMD_SVM_ATTRIB_READ_MOSTLY = 6,
  HSA_AMD_SVM_ATTRIB_AGENT_ACCESSIBLE = 0x200,
  HSA_AMD_SVM_ATTRIB_AGENT_ACCESSIBLE_IN_PLACE = 0x201,
  HSA_AMD_SVM_ATTRIB_AGENT_NO_ACCESS = 0x202,
  HSA_AMD_SVM_ATTRIB_ACCESS_QUERY = 0x203
} hsa_amd_svm_attribute_t;
typedef struct hsa_amd_svm_attribute_pair_s
{
  uint64_t attribute;
  uint64_t value;
} hsa_amd_svm_attribute_pair_t;
typedef hsa_status_t hsaew_hsa_amd_svm_attributes_set(void *ptr, size_t size, hsa_amd_svm_attribute_pair_t *attribute_list, size_t attribute_count);
typedef hsa_status_t hsaew_hsa_amd_svm_attributes_get(void *ptr, size_t size, hsa_amd_svm_attribute_pair_t *attribute_list, size_t attribute_count);
typedef hsa_status_t hsaew_hsa_amd_svm_prefetch_async(void *ptr, size_t size, hsa_agent_t agent, uint32_t num_dep_signals, const hsa_signal_t *dep_signals, hsa_signal_t completion_signal);

extern hsaew_hsa_status_string* hsa_status_string;
extern hsaew_hsa_init* hsa_init;
extern hsaew_hsa_shut_down* hsa_shut_down;
extern hsaew_hsa_system_get_info* hsa_system_get_info;
extern hsaew_hsa_extension_get_name* hsa_extension_get_name;
extern hsaew_hsa_system_extension_supported* hsa_system_extension_supported;
extern hsaew_hsa_system_major_extension_supported* hsa_system_major_extension_supported;
extern hsaew_hsa_system_get_extension_table* hsa_system_get_extension_table;
extern hsaew_hsa_system_get_major_extension_table* hsa_system_get_major_extension_table;
extern hsaew_hsa_agent_get_info* hsa_agent_get_info;
extern hsaew_hsa_iterate_agents* hsa_iterate_agents;
extern hsaew_hsa_agent_get_exception_policies* hsa_agent_get_exception_policies;
extern hsaew_hsa_cache_get_info* hsa_cache_get_info;
extern hsaew_hsa_agent_iterate_caches* hsa_agent_iterate_caches;
extern hsaew_hsa_agent_extension_supported* hsa_agent_extension_supported;
extern hsaew_hsa_agent_major_extension_supported* hsa_agent_major_extension_supported;
extern hsaew_hsa_signal_create* hsa_signal_create;
extern hsaew_hsa_signal_destroy* hsa_signal_destroy;
extern hsaew_hsa_signal_load_scacquire* hsa_signal_load_scacquire;
extern hsaew_hsa_signal_load_relaxed* hsa_signal_load_relaxed;
extern hsaew_hsa_signal_load_acquire* hsa_signal_load_acquire;
extern hsaew_hsa_signal_store_relaxed* hsa_signal_store_relaxed;
extern hsaew_hsa_signal_store_screlease* hsa_signal_store_screlease;
extern hsaew_hsa_signal_store_release* hsa_signal_store_release;
extern hsaew_hsa_signal_silent_store_relaxed* hsa_signal_silent_store_relaxed;
extern hsaew_hsa_signal_silent_store_screlease* hsa_signal_silent_store_screlease;
extern hsaew_hsa_signal_exchange_scacq_screl* hsa_signal_exchange_scacq_screl;
extern hsaew_hsa_signal_exchange_acq_rel* hsa_signal_exchange_acq_rel;
extern hsaew_hsa_signal_exchange_scacquire* hsa_signal_exchange_scacquire;
extern hsaew_hsa_signal_exchange_acquire* hsa_signal_exchange_acquire;
extern hsaew_hsa_signal_exchange_relaxed* hsa_signal_exchange_relaxed;
extern hsaew_hsa_signal_exchange_screlease* hsa_signal_exchange_screlease;
extern hsaew_hsa_signal_exchange_release* hsa_signal_exchange_release;
extern hsaew_hsa_signal_cas_scacq_screl* hsa_signal_cas_scacq_screl;
extern hsaew_hsa_signal_cas_acq_rel* hsa_signal_cas_acq_rel;
extern hsaew_hsa_signal_cas_scacquire* hsa_signal_cas_scacquire;
extern hsaew_hsa_signal_cas_acquire* hsa_signal_cas_acquire;
extern hsaew_hsa_signal_cas_relaxed* hsa_signal_cas_relaxed;
extern hsaew_hsa_signal_cas_screlease* hsa_signal_cas_screlease;
extern hsaew_hsa_signal_cas_release* hsa_signal_cas_release;
extern hsaew_hsa_signal_add_scacq_screl* hsa_signal_add_scacq_screl;
extern hsaew_hsa_signal_add_acq_rel* hsa_signal_add_acq_rel;
extern hsaew_hsa_signal_add_scacquire* hsa_signal_add_scacquire;
extern hsaew_hsa_signal_add_acquire* hsa_signal_add_acquire;
extern hsaew_hsa_signal_add_relaxed* hsa_signal_add_relaxed;
extern hsaew_hsa_signal_add_screlease* hsa_signal_add_screlease;
extern hsaew_hsa_signal_add_release* hsa_signal_add_release;
extern hsaew_hsa_signal_subtract_scacq_screl* hsa_signal_subtract_scacq_screl;
extern hsaew_hsa_signal_subtract_acq_rel* hsa_signal_subtract_acq_rel;
extern hsaew_hsa_signal_subtract_scacquire* hsa_signal_subtract_scacquire;
extern hsaew_hsa_signal_subtract_acquire* hsa_signal_subtract_acquire;
extern hsaew_hsa_signal_subtract_relaxed* hsa_signal_subtract_relaxed;
extern hsaew_hsa_signal_subtract_screlease* hsa_signal_subtract_screlease;
extern hsaew_hsa_signal_subtract_release* hsa_signal_subtract_release;
extern hsaew_hsa_signal_and_scacq_screl* hsa_signal_and_scacq_screl;
extern hsaew_hsa_signal_and_acq_rel* hsa_signal_and_acq_rel;
extern hsaew_hsa_signal_and_scacquire* hsa_signal_and_scacquire;
extern hsaew_hsa_signal_and_acquire* hsa_signal_and_acquire;
extern hsaew_hsa_signal_and_relaxed* hsa_signal_and_relaxed;
extern hsaew_hsa_signal_and_screlease* hsa_signal_and_screlease;
extern hsaew_hsa_signal_and_release* hsa_signal_and_release;
extern hsaew_hsa_signal_or_scacq_screl* hsa_signal_or_scacq_screl;
extern hsaew_hsa_signal_or_acq_rel* hsa_signal_or_acq_rel;
extern hsaew_hsa_signal_or_scacquire* hsa_signal_or_scacquire;
extern hsaew_hsa_signal_or_acquire* hsa_signal_or_acquire;
extern hsaew_hsa_signal_or_relaxed* hsa_signal_or_relaxed;
extern hsaew_hsa_signal_or_screlease* hsa_signal_or_screlease;
extern hsaew_hsa_signal_or_release* hsa_signal_or_release;
extern hsaew_hsa_signal_xor_scacq_screl* hsa_signal_xor_scacq_screl;
extern hsaew_hsa_signal_xor_acq_rel* hsa_signal_xor_acq_rel;
extern hsaew_hsa_signal_xor_scacquire* hsa_signal_xor_scacquire;
extern hsaew_hsa_signal_xor_acquire* hsa_signal_xor_acquire;
extern hsaew_hsa_signal_xor_relaxed* hsa_signal_xor_relaxed;
extern hsaew_hsa_signal_xor_screlease* hsa_signal_xor_screlease;
extern hsaew_hsa_signal_xor_release* hsa_signal_xor_release;
extern hsaew_hsa_signal_wait_scacquire* hsa_signal_wait_scacquire;
extern hsaew_hsa_signal_wait_relaxed* hsa_signal_wait_relaxed;
extern hsaew_hsa_signal_wait_acquire* hsa_signal_wait_acquire;
extern hsaew_hsa_signal_group_create* hsa_signal_group_create;
extern hsaew_hsa_signal_group_destroy* hsa_signal_group_destroy;
extern hsaew_hsa_signal_group_wait_any_scacquire* hsa_signal_group_wait_any_scacquire;
extern hsaew_hsa_signal_group_wait_any_relaxed* hsa_signal_group_wait_any_relaxed;
extern hsaew_hsa_queue_create* hsa_queue_create;
extern hsaew_hsa_soft_queue_create* hsa_soft_queue_create;
extern hsaew_hsa_queue_destroy* hsa_queue_destroy;
extern hsaew_hsa_queue_inactivate* hsa_queue_inactivate;
extern hsaew_hsa_queue_load_read_index_acquire* hsa_queue_load_read_index_acquire;
extern hsaew_hsa_queue_load_read_index_scacquire* hsa_queue_load_read_index_scacquire;
extern hsaew_hsa_queue_load_read_index_relaxed* hsa_queue_load_read_index_relaxed;
extern hsaew_hsa_queue_load_write_index_acquire* hsa_queue_load_write_index_acquire;
extern hsaew_hsa_queue_load_write_index_scacquire* hsa_queue_load_write_index_scacquire;
extern hsaew_hsa_queue_load_write_index_relaxed* hsa_queue_load_write_index_relaxed;
extern hsaew_hsa_queue_store_write_index_relaxed* hsa_queue_store_write_index_relaxed;
extern hsaew_hsa_queue_store_write_index_release* hsa_queue_store_write_index_release;
extern hsaew_hsa_queue_store_write_index_screlease* hsa_queue_store_write_index_screlease;
extern hsaew_hsa_queue_cas_write_index_acq_rel* hsa_queue_cas_write_index_acq_rel;
extern hsaew_hsa_queue_cas_write_index_scacq_screl* hsa_queue_cas_write_index_scacq_screl;
extern hsaew_hsa_queue_cas_write_index_acquire* hsa_queue_cas_write_index_acquire;
extern hsaew_hsa_queue_cas_write_index_scacquire* hsa_queue_cas_write_index_scacquire;
extern hsaew_hsa_queue_cas_write_index_relaxed* hsa_queue_cas_write_index_relaxed;
extern hsaew_hsa_queue_cas_write_index_release* hsa_queue_cas_write_index_release;
extern hsaew_hsa_queue_cas_write_index_screlease* hsa_queue_cas_write_index_screlease;
extern hsaew_hsa_queue_add_write_index_acq_rel* hsa_queue_add_write_index_acq_rel;
extern hsaew_hsa_queue_add_write_index_scacq_screl* hsa_queue_add_write_index_scacq_screl;
extern hsaew_hsa_queue_add_write_index_acquire* hsa_queue_add_write_index_acquire;
extern hsaew_hsa_queue_add_write_index_scacquire* hsa_queue_add_write_index_scacquire;
extern hsaew_hsa_queue_add_write_index_relaxed* hsa_queue_add_write_index_relaxed;
extern hsaew_hsa_queue_add_write_index_release* hsa_queue_add_write_index_release;
extern hsaew_hsa_queue_add_write_index_screlease* hsa_queue_add_write_index_screlease;
extern hsaew_hsa_queue_store_read_index_relaxed* hsa_queue_store_read_index_relaxed;
extern hsaew_hsa_queue_store_read_index_release* hsa_queue_store_read_index_release;
extern hsaew_hsa_queue_store_read_index_screlease* hsa_queue_store_read_index_screlease;
extern hsaew_hsa_region_get_info* hsa_region_get_info;
extern hsaew_hsa_agent_iterate_regions* hsa_agent_iterate_regions;
extern hsaew_hsa_memory_allocate* hsa_memory_allocate;
extern hsaew_hsa_memory_free* hsa_memory_free;
extern hsaew_hsa_memory_copy* hsa_memory_copy;
extern hsaew_hsa_memory_assign_agent* hsa_memory_assign_agent;
extern hsaew_hsa_memory_register* hsa_memory_register;
extern hsaew_hsa_memory_deregister* hsa_memory_deregister;
extern hsaew_hsa_isa_from_name* hsa_isa_from_name;
extern hsaew_hsa_agent_iterate_isas* hsa_agent_iterate_isas;
extern hsaew_hsa_isa_get_info* hsa_isa_get_info;
extern hsaew_hsa_isa_get_info_alt* hsa_isa_get_info_alt;
extern hsaew_hsa_isa_get_exception_policies* hsa_isa_get_exception_policies;
extern hsaew_hsa_isa_get_round_method* hsa_isa_get_round_method;
extern hsaew_hsa_wavefront_get_info* hsa_wavefront_get_info;
extern hsaew_hsa_isa_iterate_wavefronts* hsa_isa_iterate_wavefronts;
extern hsaew_hsa_isa_compatible* hsa_isa_compatible;
extern hsaew_hsa_code_object_reader_create_from_file* hsa_code_object_reader_create_from_file;
extern hsaew_hsa_code_object_reader_create_from_memory* hsa_code_object_reader_create_from_memory;
extern hsaew_hsa_code_object_reader_destroy* hsa_code_object_reader_destroy;
extern hsaew_hsa_executable_create* hsa_executable_create;
extern hsaew_hsa_executable_create_alt* hsa_executable_create_alt;
extern hsaew_hsa_executable_destroy* hsa_executable_destroy;
extern hsaew_hsa_executable_load_program_code_object* hsa_executable_load_program_code_object;
extern hsaew_hsa_executable_load_agent_code_object* hsa_executable_load_agent_code_object;
extern hsaew_hsa_executable_freeze* hsa_executable_freeze;
extern hsaew_hsa_executable_get_info* hsa_executable_get_info;
extern hsaew_hsa_executable_global_variable_define* hsa_executable_global_variable_define;
extern hsaew_hsa_executable_agent_global_variable_define* hsa_executable_agent_global_variable_define;
extern hsaew_hsa_executable_readonly_variable_define* hsa_executable_readonly_variable_define;
extern hsaew_hsa_executable_validate* hsa_executable_validate;
extern hsaew_hsa_executable_validate_alt* hsa_executable_validate_alt;
extern hsaew_hsa_executable_get_symbol* hsa_executable_get_symbol;
extern hsaew_hsa_executable_get_symbol_by_name* hsa_executable_get_symbol_by_name;
extern hsaew_hsa_executable_symbol_get_info* hsa_executable_symbol_get_info;
extern hsaew_hsa_executable_iterate_symbols* hsa_executable_iterate_symbols;
extern hsaew_hsa_executable_iterate_agent_symbols* hsa_executable_iterate_agent_symbols;
extern hsaew_hsa_executable_iterate_program_symbols* hsa_executable_iterate_program_symbols;
extern hsaew_hsa_code_object_serialize* hsa_code_object_serialize;
extern hsaew_hsa_code_object_deserialize* hsa_code_object_deserialize;
extern hsaew_hsa_code_object_destroy* hsa_code_object_destroy;
extern hsaew_hsa_code_object_get_info* hsa_code_object_get_info;
extern hsaew_hsa_executable_load_code_object* hsa_executable_load_code_object;
extern hsaew_hsa_code_object_get_symbol* hsa_code_object_get_symbol;
extern hsaew_hsa_code_object_get_symbol_from_name* hsa_code_object_get_symbol_from_name;
extern hsaew_hsa_code_symbol_get_info* hsa_code_symbol_get_info;
extern hsaew_hsa_code_object_iterate_symbols* hsa_code_object_iterate_symbols;
extern hsaew_hsa_ext_image_get_capability* hsa_ext_image_get_capability;
extern hsaew_hsa_ext_image_get_capability_with_layout* hsa_ext_image_get_capability_with_layout;
extern hsaew_hsa_ext_image_data_get_info* hsa_ext_image_data_get_info;
extern hsaew_hsa_ext_image_data_get_info_with_layout* hsa_ext_image_data_get_info_with_layout;
extern hsaew_hsa_ext_image_create* hsa_ext_image_create;
extern hsaew_hsa_ext_image_create_with_layout* hsa_ext_image_create_with_layout;
extern hsaew_hsa_ext_image_destroy* hsa_ext_image_destroy;
extern hsaew_hsa_ext_image_copy* hsa_ext_image_copy;
extern hsaew_hsa_ext_image_import* hsa_ext_image_import;
extern hsaew_hsa_ext_image_export* hsa_ext_image_export;
extern hsaew_hsa_ext_image_clear* hsa_ext_image_clear;
extern hsaew_hsa_ext_sampler_create* hsa_ext_sampler_create;
extern hsaew_hsa_ext_sampler_destroy* hsa_ext_sampler_destroy;
extern hsaew_hsa_amd_coherency_get_type* hsa_amd_coherency_get_type;
extern hsaew_hsa_amd_coherency_set_type* hsa_amd_coherency_set_type;
extern hsaew_hsa_amd_profiling_set_profiler_enabled* hsa_amd_profiling_set_profiler_enabled;
extern hsaew_hsa_amd_profiling_async_copy_enable* hsa_amd_profiling_async_copy_enable;
extern hsaew_hsa_amd_profiling_get_dispatch_time* hsa_amd_profiling_get_dispatch_time;
extern hsaew_hsa_amd_profiling_get_async_copy_time* hsa_amd_profiling_get_async_copy_time;
extern hsaew_hsa_amd_profiling_convert_tick_to_system_domain* hsa_amd_profiling_convert_tick_to_system_domain;
extern hsaew_hsa_amd_signal_create* hsa_amd_signal_create;
extern hsaew_hsa_amd_signal_value_pointer* hsa_amd_signal_value_pointer;
extern hsaew_hsa_amd_signal_async_handler* hsa_amd_signal_async_handler;
extern hsaew_hsa_amd_async_function* hsa_amd_async_function;
extern hsaew_hsa_amd_signal_wait_any* hsa_amd_signal_wait_any;
extern hsaew_hsa_amd_image_get_info_max_dim* hsa_amd_image_get_info_max_dim;
extern hsaew_hsa_amd_queue_cu_set_mask* hsa_amd_queue_cu_set_mask;
extern hsaew_hsa_amd_queue_cu_get_mask* hsa_amd_queue_cu_get_mask;
extern hsaew_hsa_amd_memory_pool_get_info* hsa_amd_memory_pool_get_info;
extern hsaew_hsa_amd_agent_iterate_memory_pools* hsa_amd_agent_iterate_memory_pools;
extern hsaew_hsa_amd_memory_pool_allocate* hsa_amd_memory_pool_allocate;
extern hsaew_hsa_amd_memory_pool_free* hsa_amd_memory_pool_free;
extern hsaew_hsa_amd_memory_async_copy* hsa_amd_memory_async_copy;
extern hsaew_hsa_amd_memory_async_copy_rect* hsa_amd_memory_async_copy_rect;
extern hsaew_hsa_amd_agent_memory_pool_get_info* hsa_amd_agent_memory_pool_get_info;
extern hsaew_hsa_amd_agents_allow_access* hsa_amd_agents_allow_access;
extern hsaew_hsa_amd_memory_pool_can_migrate* hsa_amd_memory_pool_can_migrate;
extern hsaew_hsa_amd_memory_migrate* hsa_amd_memory_migrate;
extern hsaew_hsa_amd_memory_lock* hsa_amd_memory_lock;
extern hsaew_hsa_amd_memory_lock_to_pool* hsa_amd_memory_lock_to_pool;
extern hsaew_hsa_amd_memory_unlock* hsa_amd_memory_unlock;
extern hsaew_hsa_amd_memory_fill* hsa_amd_memory_fill;
extern hsaew_hsa_amd_interop_map_buffer* hsa_amd_interop_map_buffer;
extern hsaew_hsa_amd_interop_unmap_buffer* hsa_amd_interop_unmap_buffer;
extern hsaew_hsa_amd_image_create* hsa_amd_image_create;
extern hsaew_hsa_amd_pointer_info* hsa_amd_pointer_info;
extern hsaew_hsa_amd_pointer_info_set_userdata* hsa_amd_pointer_info_set_userdata;
extern hsaew_hsa_amd_ipc_memory_create* hsa_amd_ipc_memory_create;
extern hsaew_hsa_amd_ipc_memory_attach* hsa_amd_ipc_memory_attach;
extern hsaew_hsa_amd_ipc_memory_detach* hsa_amd_ipc_memory_detach;
extern hsaew_hsa_amd_ipc_signal_create* hsa_amd_ipc_signal_create;
extern hsaew_hsa_amd_ipc_signal_attach* hsa_amd_ipc_signal_attach;
extern hsaew_hsa_amd_register_system_event_handler* hsa_amd_register_system_event_handler;
extern hsaew_hsa_amd_queue_set_priority* hsa_amd_queue_set_priority;
extern hsaew_hsa_amd_register_deallocation_callback* hsa_amd_register_deallocation_callback;
extern hsaew_hsa_amd_deregister_deallocation_callback* hsa_amd_deregister_deallocation_callback;
extern hsaew_hsa_amd_svm_attributes_set* hsa_amd_svm_attributes_set;
extern hsaew_hsa_amd_svm_attributes_get* hsa_amd_svm_attributes_get;
extern hsaew_hsa_amd_svm_prefetch_async* hsa_amd_svm_prefetch_async;

#ifdef __cplusplus
}
#endif
     
