name: macOS builds

on:
  workflow_call:
    inputs:
      build_arch:
        required: true
        type: string
      build_type:
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install llvm cmake ninja
          echo "JAVA_HOME=$JAVA_HOME_8_X64" >> $GITHUB_ENV
          echo "/usr/local/opt/llvm/bin"    >> $GITHUB_PATH

      - name: Dotenv
        id: dotenv
        uses: falti/dotenv-action@v1.0.4
        with:
          path: ./native/.env

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: "${{ steps.dotenv.outputs.vcpkg_commit }}"

      - name: Check environment
        run: |
          clang --version
          llvm-tblgen --version
          echo "JAVA_HOME=$JAVA_HOME"
          echo "VCPKG_ROOT=$VCPKG_ROOT"

      - name: Restore LLVM cache
        if: ${{ !env.ACT }}
        id: restore-llvm
        uses: actions/cache/restore@3
        with:
          path: ./native/llvm-*
          key: ${{ runner.os }}-${{ inputs.build_arch }}-${{ hashFiles('./native/build_llvm.cmake', './native/build_llvm.cmake_cache', './native/ProjectConfig.cmake', './native/toolchain*.cmake') }}

      - name: Build LLVM
        id: build-llvm
        if: steps.restore-llvm.outputs.cache-hit != 'true'
        working-directory: ./native
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=LLVM -P build.cmake

      - name: Save LLVM cache
        if: steps.build-llvm.outcome == 'success'
        uses: actions/cache/save@3
        id: save-llvm
        with:
          path: ./native/llvm-*
          key: ${{ runner.os }}-${{ inputs.build_arch }}-${{ hashFiles('./native/build_llvm.cmake', './native/build_llvm.cmake_cache', './native/ProjectConfig.cmake', './native/toolchain*.cmake') }}

      - name: Configure release build
        working-directory: ./native
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=CONFIGURE -P build.cmake

      - name: Release build polyrt-exec
        working-directory: ./native
        if: always()
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyrt-exec -P build.cmake

      - name: Release build polyc-bin
        working-directory: ./native
        if: always()
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyc-bin -P build.cmake

      - name: Release build shim
        working-directory: ./native
        if: always()
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyc-JNIshim -P build.cmake

      - name: Release build runtime
        working-directory: ./native
        if: always()
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyrt-JNI -P build.cmake

      - name: Release build compiler
        working-directory: ./native
        if: always()
        run: cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyc-JNI -P build.cmake

      - name: Check artefact
        if: always()
        working-directory: ./native
        run: |
          ls -lah build-darwin-${{ inputs.build_arch }}/bindings/jvm
          ls -lah build-darwin-${{ inputs.build_arch }}/polyc/
          ls -lah build-darwin-${{ inputs.build_arch }}/polyrt/
          show_libs () {
             for arg in $@; do
               file "$1"
               otool -L "$1"
               echo "======"
             done
          }
          show_libs build-darwin-${{ inputs.build_arch }}/bindings/jvm/libpolyc-JNI.dylib
          show_libs build-darwin-${{ inputs.build_arch }}/bindings/jvm/libpolyrt-JNI.dylib
          show_libs build-darwin-${{ inputs.build_arch }}/bindings/jvm/libpolyc-JNIshim.dylib
          show_libs build-darwin-${{ inputs.build_arch }}/polyc/polyc
          show_libs build-darwin-${{ inputs.build_arch }}/polyrt/polyrt-exec
