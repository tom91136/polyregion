name: Windows builds

on:
  workflow_call:
    inputs:
      build_arch:
        required: true
        type: string
      build_type:
        required: true
        type: string
defaults:
  run:
    shell: cmd

jobs:
  build:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v3

      - name: Setup JDK (${{ inputs.build_arch }})
        shell: pwsh
        working-directory: ./native
        run: |
          switch ("${{ inputs.build_arch }}".ToLower()) {
            "x86" { $jdk_arch = "x86-32" }
            "amd64" { $jdk_arch = "x64" }
            default {
              Write-Error "Invalid architecture for JDK: $input"
              break
            }
          }
          $version = "jdk8u352-b08"
          $version_short = $version
          $version_short.replace("-", "")
          $url = "https://github.com/adoptium/temurin8-binaries/releases/download/${version}/OpenJDK8U-jdk_${jdk_arch}_windows_hotspot_${version_short}.zip"
          Write-Output "Downloading JDK from $url"
          Invoke-WebRequest -Uri $url -OutFile jdk_${jdk_arch}.zip
          Expand-Archive -Path .\jdk_${jdk_arch}.zip -DestinationPath .\jdk_${jdk_arch}
          Get-ChildItem -Name -Recurse .
          echo "JAVA_HOME=${PWD}\jdk_${jdk_arch}\$version" >> $env:GITHUB_ENV

      - name: Check environment
        shell: pwsh
        run: |
          Write-Output $env:JAVA_HOME
          & "$env:JAVA_HOME\bin\java.exe" -version
          Write-Output $env:PROCESSOR_ARCHITECTURE

      - name: Restore LLVM cache
        if: ${{ !env.ACT }}
        id: restore-llvm
        uses: actions/cache/restore@v3.2.0-beta.1
        with:
          path: ./native/llvm-*
          key: ${{ runner.os }}-${{ inputs.build_arch }}-${{ hashFiles('./native/build_llvm.cmake') }}-${{ hashFiles('./native/toolchain*.cmake') }}

      - name: Build LLVM
        id: build-llvm
        if: steps.restore-llvm.outputs.cache-hit != 'true'
        working-directory: ./native
        run: |
          # Don't use host tools on Windows as it's not present, but them from scratch 
          # FIXME this needs revisiting if ARM64 on Windows takes off 
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DLLVM_USE_HOST_TOOLS=OFF -DARCH=${{ inputs.build_arch }} -DACTION=LLVM -P build.cmake

      - name: Save LLVM cache
        if: steps.build-llvm.outcome == 'success'
        uses: actions/cache/save@v3.2.0-beta.1
        id: save-llvm
        with:
          path: ./native/llvm-*
          key: ${{ runner.os }}-${{ inputs.build_arch }}-${{ hashFiles('./native/build_llvm.cmake') }}-${{ hashFiles('./native/toolchain*.cmake') }}

      - name: Configure release build
        working-directory: ./native
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=CONFIGURE -P build.cmake

      - name: Release build runtime-drv
        working-directory: ./native
        if: always()
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=runtime-drv -P build.cmake

      - name: Release build compiler-drv
        working-directory: ./native
        if: always()
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=compiler-drv -P build.cmake

      - name: Release build shim
        working-directory: ./native
        if: always()
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyregion-shim-jvm -P build.cmake

      - name: Release build runtime
        working-directory: ./native
        if: always()
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyregion-runtime-jvm -P build.cmake

      - name: Release build compiler
        working-directory: ./native
        if: always()
        run: |
          call setup_msvc_env.bat ${{ inputs.build_arch }} 
          cmake -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} -DARCH=${{ inputs.build_arch }} -DACTION=BUILD -DTARGET=polyregion-compiler-jvm -P build.cmake

      - name: Check artefact
        if: always()
        shell: pwsh
        working-directory: ./native
        run: |
          ls .\build-windows-${{ inputs.build_arch }}\bindings\jvm\ | Select-Object Name, @{Name="MegaBytes";Expression={$_.Length / 1MB}}
          ls .\build-windows-${{ inputs.build_arch }}\compiler      | Select-Object Name, @{Name="MegaBytes";Expression={$_.Length / 1MB}}
          ls .\build-windows-${{ inputs.build_arch }}\runtime       | Select-Object Name, @{Name="MegaBytes";Expression={$_.Length / 1MB}}
